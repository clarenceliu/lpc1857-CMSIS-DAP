; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\system_lpc18xx.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\system_lpc18xx.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\app -I.\USBStack\INC -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC18xx -D__MICROLIB --omf_browse=.\obj\system_lpc18xx.crf system_LPC18xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetClock PROC
;;;291     ******************************************************************************/
;;;292    void SetClock (void) {
000000  b530              PUSH     {r4,r5,lr}
;;;293      uint32_t x, i;
;;;294      uint32_t selp, seli;
;;;295    
;;;296      /* Set flash wait states to maximum                                         */
;;;297      LPC_EMC->STATICWAITRD0  = 0x1F;
000002  49fb              LDR      r1,|L1.1008|
000004  201f              MOVS     r0,#0x1f
000006  6008              STR      r0,[r1,#0]
;;;298      /* Switch BASE_M3_CLOCK to IRC                                              */
;;;299      LPC_CGU->BASE_M3_CLK = (0x01        << 11) |  /* Autoblock En               */
000008  48fb              LDR      r0,|L1.1016|
00000a  4afa              LDR      r2,|L1.1012|
00000c  66c2              STR      r2,[r0,#0x6c]
;;;300                             (CLK_SRC_IRC << 24) ;  /* Set clock source           */
;;;301    
;;;302      /* Configure input to crystal oscilator                                     */
;;;303      LPC_CGU->XTAL_OSC_CTRL = (0 << 0) |   /* Enable oscillator-pad              */
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
;;;304                               (0 << 1) |   /* Operation with crystal connected   */
;;;305                               (0 << 2) ;   /* Low-frequency mode                 */
;;;306    
;;;307    #if (USE_SPIFI)
;;;308    /* configure SPIFI clk to IRC via IDIVA (later IDIVA is configured to PLL1/3) */
;;;309      LPC_CGU->IDIVA_CTRL     = (0              <<  0) |  /* Disable Power-down   */
;;;310                                (0              <<  2) |  /* IDIV                 */
;;;311                                (1              << 11) |  /* Autoblock En         */
;;;312                                (CLK_SRC_IRC    << 24) ;  /* Clock source         */
;;;313    
;;;314      LPC_CGU->BASE_SPIFI_CLK = (0              <<  0) |  /* Disable Power-down   */
;;;315                                (0              <<  2) |  /* IDIV                 */
;;;316                                (1              << 11) |  /* Autoblock En         */
;;;317                                (CLK_SRC_IDIVA  << 24) ;  /* Clock source         */
;;;318    #endif
;;;319    
;;;320    /*----------------------------------------------------------------------------
;;;321      PLL1 Setup
;;;322     *----------------------------------------------------------------------------*/
;;;323      /* Power down PLL                                                           */
;;;324      LPC_CGU->PLL1_CTRL |= 1;
000012  6c41              LDR      r1,[r0,#0x44]
000014  f0410101          ORR      r1,r1,#1
000018  6441              STR      r1,[r0,#0x44]
;;;325    
;;;326    #if ((PLL1_FOUT >= 180000000UL) && (CPU_CLK_SEL == CLK_SRC_PLL1))
;;;327      /* To run at full speed, CPU must first run at an intermediate speed        */
;;;328      LPC_CGU->PLL1_CTRL = (0            << 0) | /* PLL1 Enabled                  */
00001a  49f8              LDR      r1,|L1.1020|
00001c  6441              STR      r1,[r0,#0x44]
                  |L1.30|
;;;329                           (0            << 1) | /* CCO out sent to post-dividers */
;;;330                           (0            << 6) | /* PLL output used as feedback   */
;;;331                           (1            << 7) | /* Direct on/off                 */
;;;332                           (0            << 8) | /* PSEL                          */
;;;333                           (0            << 11)| /* Autoblock Disabled            */
;;;334                           (2            << 12)| /* NSEL                          */
;;;335                           (39           << 16)| /* MSEL                          */
;;;336                           (PLL1_CLK_SEL << 24); /* Clock source                  */
;;;337      /* Wait for lock                                                            */
;;;338      while (!(LPC_CGU->PLL1_STAT & 1));
00001e  6c01              LDR      r1,[r0,#0x40]
000020  07c9              LSLS     r1,r1,#31
000022  d0fc              BEQ      |L1.30|
;;;339    
;;;340      /* CPU base clock @ 160 MHz before final clock set                          */
;;;341      LPC_CGU->BASE_M3_CLK     = (0x01 << 11) |  /* Autoblock En                  */
000024  4bf6              LDR      r3,|L1.1024|
000026  66c3              STR      r3,[r0,#0x6c]
;;;342                                 (0x09 << 24) ;  /* Clock source: PLL1            */
;;;343    
;;;344      for (i = 1000; i; i--);                    /* Wait about 4000 cycles        */
000028  f24031e6          MOV      r1,#0x3e6
                  |L1.44|
00002c  1e49              SUBS     r1,r1,#1
00002e  d1fd              BNE      |L1.44|
;;;345    #endif
;;;346      /* Configure PLL1                                                           */
;;;347      LPC_CGU->PLL1_CTRL = (0            << 0) | /* PLL1 Enabled                  */
000030  49f4              LDR      r1,|L1.1028|
000032  6441              STR      r1,[r0,#0x44]
                  |L1.52|
;;;348                           (PLL1_BYPASS  << 1) | /* CCO out sent to post-dividers */
;;;349                           (PLL1_FBSEL   << 6) | /* PLL output used as feedback   */
;;;350                           (PLL1_DIRECT  << 7) | /* Direct on/off                 */
;;;351                           (PLL1_PSEL    << 8) | /* PSEL                          */
;;;352                           (1            << 11)| /* Autoblock En                  */
;;;353                           (PLL1_NSEL    << 12)| /* NSEL                          */
;;;354                           (PLL1_MSEL    << 16)| /* MSEL                          */
;;;355                           (PLL1_CLK_SEL << 24); /* Clock source                  */
;;;356    
;;;357      /* Wait for lock                                                            */
;;;358      while (!(LPC_CGU->PLL1_STAT & 1));
000034  6c01              LDR      r1,[r0,#0x40]
000036  07c9              LSLS     r1,r1,#31
000038  d0fc              BEQ      |L1.52|
;;;359    
;;;360      /* Set CPU base clock source                                                */
;;;361      LPC_CGU->BASE_M3_CLK = (0x01        << 11) |  /* Autoblock En               */
00003a  66c3              STR      r3,[r0,#0x6c]
;;;362                             (CPU_CLK_SEL << 24) ;  /* Set clock source           */
;;;363    
;;;364    
;;;365    /*----------------------------------------------------------------------------
;;;366      PLL0USB Setup
;;;367     *----------------------------------------------------------------------------*/
;;;368      
;;;369      /* Power down PLL0USB                                                       */
;;;370      LPC_CGU->PLL0USB_CTRL  |= 1;
00003c  6a01              LDR      r1,[r0,#0x20]
00003e  f0410101          ORR      r1,r1,#1
000042  6201              STR      r1,[r0,#0x20]
;;;371    
;;;372      /* M divider                                                                */
;;;373      x = 0x00004000;
000044  f44f4180          MOV      r1,#0x4000
;;;374      switch (PLL0USB_M) {
;;;375        case 0:  x = 0xFFFFFFFF;
;;;376          break;
;;;377        case 1:  x = 0x00018003;
;;;378          break;
;;;379        case 2:  x = 0x00010003;
;;;380          break;
;;;381        default:
;;;382          for (i = PLL0USB_M; i <= 0x8000; i++) {
000048  2314              MOVS     r3,#0x14
00004a  004c              LSLS     r4,r1,#1
                  |L1.76|
;;;383            x = (((x ^ (x >> 1)) & 1) << 14) | ((x >> 1) & 0x3FFF);
00004c  ea810551          EOR      r5,r1,r1,LSR #1
000050  f0050501          AND      r5,r5,#1
000054  f3c1014d          UBFX     r1,r1,#1,#14
000058  1c5b              ADDS     r3,r3,#1              ;382
00005a  ea413185          ORR      r1,r1,r5,LSL #14
00005e  42a3              CMP      r3,r4                 ;382
000060  d9f4              BLS      |L1.76|
;;;384          }
;;;385      }
;;;386      
;;;387      if (PLL0USB_M < 60) selp = (PLL0USB_M >> 1) + 1;
;;;388      else        selp = 31;
;;;389      
;;;390      if      (PLL0USB_M > 16384) seli = 1;
;;;391      else if (PLL0USB_M >  8192) seli = 2;
;;;392      else if (PLL0USB_M >  2048) seli = 4;
;;;393      else if (PLL0USB_M >=  501) seli = 8;
;;;394      else if (PLL0USB_M >=   60) seli = 4 * (1024 / (PLL0USB_M + 9));
;;;395      else                        seli = (PLL0USB_M & 0x3C) + 4;
;;;396      LPC_CGU->PLL0USB_MDIV   =  (selp   << 17) |
000062  4be9              LDR      r3,|L1.1032|
000064  430b              ORRS     r3,r3,r1
000066  6243              STR      r3,[r0,#0x24]
;;;397                                 (seli   << 22) |
;;;398                                 (x      <<  0);
;;;399    
;;;400      /* N divider                                                                */
;;;401      x = 0x80;
;;;402      switch (PLL0USB_N) {
;;;403        case 0:  x = 0xFFFFFFFF;
;;;404          break;
;;;405        case 1:  x = 0x00000302;
;;;406          break;
;;;407        case 2:  x = 0x00000202;
;;;408          break;
;;;409        default: 
;;;410          for (i = PLL0USB_N; i <= 0x0100; i++) {
;;;411            x =(((x ^ (x >> 2) ^ (x >> 3) ^ (x >> 4)) & 1) << 7) | ((x >> 1) & 0x7F);
;;;412          }
;;;413      }
;;;414      LPC_CGU->PLL0USB_NP_DIV = (x << 12);
000068  49e8              LDR      r1,|L1.1036|
00006a  6281              STR      r1,[r0,#0x28]
;;;415      
;;;416      /* P divider                                                                */
;;;417      x = 0x10;
;;;418      switch (PLL0USB_P) {
;;;419        case 0:  x = 0xFFFFFFFF;
;;;420          break;
;;;421        case 1:  x = 0x00000062;
;;;422          break;
;;;423        case 2:  x = 0x00000042;
;;;424          break;
;;;425        default:
;;;426          for (i = PLL0USB_P; i <= 0x200; i++) {
;;;427            x = (((x ^ (x >> 2)) & 1) << 4) | ((x >> 1) &0x0F);
;;;428          }
;;;429      } 
;;;430      LPC_CGU->PLL0USB_NP_DIV |= x;
00006c  6a81              LDR      r1,[r0,#0x28]
00006e  f0410162          ORR      r1,r1,#0x62
000072  6281              STR      r1,[r0,#0x28]
;;;431      
;;;432      LPC_CGU->PLL0USB_CTRL  = (PLL0USB_CLK_SEL   << 24) | /* Clock source sel    */                             
000074  49e6              LDR      r1,|L1.1040|
000076  6201              STR      r1,[r0,#0x20]
                  |L1.120|
;;;433                               (1                 << 11) | /* Autoblock En        */
;;;434                               (1                 << 4 ) | /* PLL0USB clock en    */
;;;435                               (PLL0USB_DIRECTO   << 3 ) | /* Direct output       */
;;;436                               (PLL0USB_DIRECTI   << 2 ) | /* Direct input        */
;;;437                               (PLL0USB_BYPASS    << 1 ) | /* PLL bypass          */
;;;438                               (0                 << 0 ) ; /* PLL0USB Enabled     */
;;;439      while (!(LPC_CGU->PLL0USB_STAT & 1));
000078  69c1              LDR      r1,[r0,#0x1c]
00007a  07c9              LSLS     r1,r1,#31
00007c  d0fc              BEQ      |L1.120|
;;;440    
;;;441    
;;;442    /*----------------------------------------------------------------------------
;;;443      Integer divider Setup
;;;444     *----------------------------------------------------------------------------*/
;;;445      
;;;446      /* Configure integer dividers                                               */
;;;447      LPC_CGU->IDIVA_CTRL = (0              <<  0) |  /* Disable Power-down       */
00007e  49e0              LDR      r1,|L1.1024|
000080  3108              ADDS     r1,r1,#8
000082  6481              STR      r1,[r0,#0x48]
;;;448                            (IDIVA_IDIV     <<  2) |  /* IDIV                     */
;;;449                            (1              << 11) |  /* Autoblock En             */
;;;450                            (IDIVA_CLK_SEL  << 24) ;  /* Clock source             */
;;;451    
;;;452      LPC_CGU->IDIVB_CTRL = (0              <<  0) |  /* Disable Power-down       */
000084  49e3              LDR      r1,|L1.1044|
000086  64c1              STR      r1,[r0,#0x4c]
;;;453                            (IDIVB_IDIV     <<  2) |  /* IDIV                     */
;;;454                            (1              << 11) |  /* Autoblock En             */
;;;455                            (IDIVB_CLK_SEL  << 24) ;  /* Clock source             */
;;;456    
;;;457      LPC_CGU->IDIVC_CTRL = (0              <<  0) |  /* Disable Power-down       */
000088  6502              STR      r2,[r0,#0x50]
;;;458                            (IDIVC_IDIV     <<  2) |  /* IDIV                     */
;;;459                            (1              << 11) |  /* Autoblock En             */
;;;460                            (IDIVC_CLK_SEL  << 24) ;  /* Clock source             */
;;;461    
;;;462      LPC_CGU->IDIVD_CTRL = (0              <<  0) |  /* Disable Power-down       */
00008a  6542              STR      r2,[r0,#0x54]
;;;463                            (IDIVD_IDIV     <<  2) |  /* IDIV                     */
;;;464                            (1              << 11) |  /* Autoblock En             */
;;;465                            (IDIVD_CLK_SEL  << 24) ;  /* Clock source             */
;;;466    
;;;467      LPC_CGU->IDIVE_CTRL = (0              <<  0) |  /* Disable Power-down       */
00008c  49dc              LDR      r1,|L1.1024|
00008e  3184              ADDS     r1,r1,#0x84
000090  6581              STR      r1,[r0,#0x58]
;;;468                            (IDIVE_IDIV     <<  2) |  /* IDIV                     */
;;;469                            (1              << 11) |  /* Autoblock En             */
;;;470                            (IDIVE_CLK_SEL  << 24) ;  /* Clock source             */
;;;471    }
000092  bd30              POP      {r4,r5,pc}
;;;472    
                          ENDP

                  WaitUs PROC
;;;478    
;;;479    static void WaitUs (uint32_t us) {
000094  b570              PUSH     {r4-r6,lr}
000096  4604              MOV      r4,r0
;;;480      uint32_t cyc = us * CPU_NANOSEC(1000)/4;
000098  48df              LDR      r0,|L1.1048|
00009a  f44f717a          MOV      r1,#0x3e8
00009e  4adf              LDR      r2,|L1.1052|
0000a0  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
0000a2  2300              MOVS     r3,#0
0000a4  fba00101          UMULL    r0,r1,r0,r1
0000a8  f7fffffe          BL       __aeabi_uldivmod
0000ac  fba03504          UMULL    r3,r5,r0,r4
0000b0  fb015104          MLA      r1,r1,r4,r5
0000b4  2200              MOVS     r2,#0
0000b6  fb001002          MLA      r0,r0,r2,r1
0000ba  0781              LSLS     r1,r0,#30
0000bc  ea410093          ORR      r0,r1,r3,LSR #2
                  |L1.192|
;;;481      while(cyc--);
0000c0  1e40              SUBS     r0,r0,#1
0000c2  d2fd              BCS      |L1.192|
;;;482    }
0000c4  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP

                  SystemInit_ExtMemCtl PROC
;;;519    
;;;520    void SystemInit_ExtMemCtl (void) {
0000c6  e92d47f0          PUSH     {r4-r10,lr}
;;;521      uint32_t emcdivby2_buf[emcdivby2_szw];
;;;522      uint32_t div, n;
;;;523    
;;;524      /* Select and enable EMC branch clock */
;;;525      LPC_CCU1->CLK_M3_EMC_CFG = (1 << 2) | (1 << 1) | 1;
0000ca  49d5              LDR      r1,|L1.1056|
0000cc  b086              SUB      sp,sp,#0x18           ;520
0000ce  2007              MOVS     r0,#7
0000d0  6008              STR      r0,[r1,#0]
;;;526      while (!(LPC_CCU1->CLK_M3_EMC_STAT & 1));
0000d2  1d08              ADDS     r0,r1,#4
                  |L1.212|
0000d4  6801              LDR      r1,[r0,#0]
0000d6  07c9              LSLS     r1,r1,#31
0000d8  d0fc              BEQ      |L1.212|
;;;527    
;;;528      /* Set EMC clock output delay */  
;;;529      if (SystemCoreClock < 80000000UL) {
0000da  4fcf              LDR      r7,|L1.1048|
0000dc  49d1              LDR      r1,|L1.1060|
;;;530        LPC_SCU->EMCDELAYCLK = EMC_CLK_DLY_TIM_0; /* No EMC clock out delay       */
0000de  48d2              LDR      r0,|L1.1064|
0000e0  683d              LDR      r5,[r7,#0]            ;529  ; SystemCoreClock
0000e2  2400              MOVS     r4,#0
0000e4  428d              CMP      r5,r1                 ;529
0000e6  d201              BCS      |L1.236|
0000e8  6004              STR      r4,[r0,#0]
0000ea  e002              B        |L1.242|
                  |L1.236|
;;;531      }
;;;532      else {
;;;533        LPC_SCU->EMCDELAYCLK = EMC_CLK_DLY_TIM_2; /* 2.0 ns EMC clock out delay   */
0000ec  f2477177          MOV      r1,#0x7777
0000f0  6001              STR      r1,[r0,#0]
                  |L1.242|
;;;534      }
;;;535    
;;;536      /* Configure EMC port pins */
;;;537      LPC_SCU->SFSP1_0  = EMC_PIN_SET | 2;  /* P1_0:  A5                          */
0000f2  48ce              LDR      r0,|L1.1068|
0000f4  22f2              MOVS     r2,#0xf2
0000f6  6002              STR      r2,[r0,#0]
;;;538      LPC_SCU->SFSP1_1  = EMC_PIN_SET | 2;  /* P1_1:  A6                          */
0000f8  6042              STR      r2,[r0,#4]
;;;539      LPC_SCU->SFSP1_2  = EMC_PIN_SET | 2;  /* P1_2:  A7                          */
0000fa  6082              STR      r2,[r0,#8]
;;;540      LPC_SCU->SFSP1_3  = EMC_PIN_SET | 3;  /* P1_3:  OE                          */
0000fc  21f3              MOVS     r1,#0xf3
0000fe  60c1              STR      r1,[r0,#0xc]
;;;541      LPC_SCU->SFSP1_4  = EMC_PIN_SET | 3;  /* P1_4:  BLS0                        */
000100  6101              STR      r1,[r0,#0x10]
;;;542      LPC_SCU->SFSP1_5  = EMC_PIN_SET | 3;  /* P1_5:  CS0                         */
000102  6141              STR      r1,[r0,#0x14]
;;;543      LPC_SCU->SFSP1_6  = EMC_PIN_SET | 3;  /* P1_6:  WE                          */
000104  6181              STR      r1,[r0,#0x18]
;;;544      LPC_SCU->SFSP1_7  = EMC_PIN_SET | 3;  /* P1_7:  D0                          */
000106  61c1              STR      r1,[r0,#0x1c]
;;;545      LPC_SCU->SFSP1_8  = EMC_PIN_SET | 3;  /* P1_8:  D1                          */
000108  6201              STR      r1,[r0,#0x20]
;;;546      LPC_SCU->SFSP1_9  = EMC_PIN_SET | 3;  /* P1_9:  D2                          */
00010a  6241              STR      r1,[r0,#0x24]
;;;547      LPC_SCU->SFSP1_10 = EMC_PIN_SET | 3;  /* P1_10: D3                          */
00010c  6281              STR      r1,[r0,#0x28]
;;;548      LPC_SCU->SFSP1_11 = EMC_PIN_SET | 3;  /* P1_11: D4                          */
00010e  62c1              STR      r1,[r0,#0x2c]
;;;549      LPC_SCU->SFSP1_12 = EMC_PIN_SET | 3;  /* P1_12: D5                          */
000110  6301              STR      r1,[r0,#0x30]
;;;550      LPC_SCU->SFSP1_13 = EMC_PIN_SET | 3;  /* P1_13: D6                          */
000112  6341              STR      r1,[r0,#0x34]
;;;551      LPC_SCU->SFSP1_14 = EMC_PIN_SET | 3;  /* P1_14: D7                          */
000114  6381              STR      r1,[r0,#0x38]
;;;552    
;;;553      LPC_SCU->SFSP2_0  = EMC_PIN_SET | 2;  /* P2_0:  A13                         */
000116  f8c02080          STR      r2,[r0,#0x80]
;;;554      LPC_SCU->SFSP2_1  = EMC_PIN_SET | 2;  /* P2_1:  A12                         */
00011a  f8c02084          STR      r2,[r0,#0x84]
;;;555      LPC_SCU->SFSP2_2  = EMC_PIN_SET | 2;  /* P2_2:  A11                         */
00011e  f8c02088          STR      r2,[r0,#0x88]
;;;556      LPC_SCU->SFSP2_6  = EMC_PIN_SET | 2;  /* P2_6:  A10                         */
000122  f8c02098          STR      r2,[r0,#0x98]
;;;557      LPC_SCU->SFSP2_7  = EMC_PIN_SET | 3;  /* P2_7:  A9                          */
000126  f8c0109c          STR      r1,[r0,#0x9c]
;;;558      LPC_SCU->SFSP2_8  = EMC_PIN_SET | 3;  /* P2_8:  A8                          */
00012a  f8c010a0          STR      r1,[r0,#0xa0]
;;;559      LPC_SCU->SFSP2_9  = EMC_PIN_SET | 3;  /* P2_9:  A0                          */
00012e  f8c010a4          STR      r1,[r0,#0xa4]
;;;560      LPC_SCU->SFSP2_10 = EMC_PIN_SET | 3;  /* P2_10: A1                          */
000132  f8c010a8          STR      r1,[r0,#0xa8]
;;;561      LPC_SCU->SFSP2_11 = EMC_PIN_SET | 3;  /* P2_11: A2                          */
000136  f8c010ac          STR      r1,[r0,#0xac]
;;;562      LPC_SCU->SFSP2_12 = EMC_PIN_SET | 3;  /* P2_12: A3                          */
00013a  f8c010b0          STR      r1,[r0,#0xb0]
;;;563      LPC_SCU->SFSP2_13 = EMC_PIN_SET | 3;  /* P2_13: A4                          */
00013e  f8c010b4          STR      r1,[r0,#0xb4]
;;;564    
;;;565      LPC_SCU->SFSP5_0  = EMC_PIN_SET | 2;  /* P5_0:  D12                         */
000142  f8c02200          STR      r2,[r0,#0x200]
;;;566      LPC_SCU->SFSP5_1  = EMC_PIN_SET | 2;  /* P5_1:  D13                         */
000146  f8c02204          STR      r2,[r0,#0x204]
;;;567      LPC_SCU->SFSP5_2  = EMC_PIN_SET | 2;  /* P5_2:  D14                         */
00014a  f8c02208          STR      r2,[r0,#0x208]
;;;568      LPC_SCU->SFSP5_3  = EMC_PIN_SET | 2;  /* P5_3:  D15                         */
00014e  f8c0220c          STR      r2,[r0,#0x20c]
;;;569      LPC_SCU->SFSP5_4  = EMC_PIN_SET | 2;  /* P5_4:  D8                          */
000152  f8c02210          STR      r2,[r0,#0x210]
;;;570      LPC_SCU->SFSP5_5  = EMC_PIN_SET | 2;  /* P5_5:  D9                          */
000156  f8c02214          STR      r2,[r0,#0x214]
;;;571      LPC_SCU->SFSP5_6  = EMC_PIN_SET | 2;  /* P5_6:  D10                         */
00015a  f8c02218          STR      r2,[r0,#0x218]
;;;572      LPC_SCU->SFSP5_7  = EMC_PIN_SET | 2;  /* P5_7:  D11                         */
00015e  f8c0221c          STR      r2,[r0,#0x21c]
;;;573    
;;;574      LPC_SCU->SFSP6_1  = EMC_PIN_SET | 1;  /* P6_1:  DYCS1                       */
000162  23f1              MOVS     r3,#0xf1
000164  f8c03284          STR      r3,[r0,#0x284]
;;;575      LPC_SCU->SFSP6_2  = EMC_PIN_SET | 1;  /* P6_3:  CKEOUT1                     */
000168  f8c03288          STR      r3,[r0,#0x288]
;;;576      LPC_SCU->SFSP6_3  = EMC_PIN_SET | 3;  /* P6_3:  CS1                         */
00016c  f8c0128c          STR      r1,[r0,#0x28c]
;;;577      LPC_SCU->SFSP6_4  = EMC_PIN_SET | 3;  /* P6_4:  CAS                         */
000170  f8c01290          STR      r1,[r0,#0x290]
;;;578      LPC_SCU->SFSP6_5  = EMC_PIN_SET | 3;  /* P6_5:  RAS                         */
000174  f8c01294          STR      r1,[r0,#0x294]
;;;579      LPC_SCU->SFSP6_6  = EMC_PIN_SET | 1;  /* P6_6:  BLS1                        */
000178  f8c03298          STR      r3,[r0,#0x298]
;;;580      LPC_SCU->SFSP6_7  = EMC_PIN_SET | 1;  /* P6_7:  A15                         */
00017c  f8c0329c          STR      r3,[r0,#0x29c]
;;;581      LPC_SCU->SFSP6_8  = EMC_PIN_SET | 1;  /* P6_8:  A14                         */
000180  f8c032a0          STR      r3,[r0,#0x2a0]
;;;582      LPC_SCU->SFSP6_9  = EMC_PIN_SET | 3;  /* P6_9:  DYCS0                       */
000184  f8c012a4          STR      r1,[r0,#0x2a4]
;;;583      LPC_SCU->SFSP6_10 = EMC_PIN_SET | 3;  /* P6_10: DQMOUT1                     */
000188  f8c012a8          STR      r1,[r0,#0x2a8]
;;;584      LPC_SCU->SFSP6_11 = EMC_PIN_SET | 3;  /* P6_11: CKEOUT0                     */
00018c  f8c012ac          STR      r1,[r0,#0x2ac]
;;;585      LPC_SCU->SFSP6_12 = EMC_PIN_SET | 3;  /* P6_12: DQMOUT0                     */
000190  f8c012b0          STR      r1,[r0,#0x2b0]
;;;586    
;;;587      LPC_SCU->SFSPA_4  = EMC_PIN_SET | 3;  /* PA_4:  A23                         */
000194  48a6              LDR      r0,|L1.1072|
000196  6001              STR      r1,[r0,#0]
;;;588    
;;;589      LPC_SCU->SFSPD_0  = EMC_PIN_SET | 2;  /* PD_0:  DQMOUT2                     */
000198  48a6              LDR      r0,|L1.1076|
00019a  6002              STR      r2,[r0,#0]
;;;590      LPC_SCU->SFSPD_1  = EMC_PIN_SET | 2;  /* PD_1:  CKEOUT2                     */
00019c  1d00              ADDS     r0,r0,#4
00019e  6002              STR      r2,[r0,#0]
;;;591      LPC_SCU->SFSPD_2  = EMC_PIN_SET | 2;  /* PD_2:  D16                         */
0001a0  1d00              ADDS     r0,r0,#4
0001a2  6002              STR      r2,[r0,#0]
;;;592      LPC_SCU->SFSPD_3  = EMC_PIN_SET | 2;  /* PD_3:  D17                         */
0001a4  1d00              ADDS     r0,r0,#4
0001a6  6002              STR      r2,[r0,#0]
;;;593      LPC_SCU->SFSPD_4  = EMC_PIN_SET | 2;  /* PD_4:  D18                         */
0001a8  1d00              ADDS     r0,r0,#4
0001aa  6002              STR      r2,[r0,#0]
;;;594      LPC_SCU->SFSPD_5  = EMC_PIN_SET | 2;  /* PD_5:  D19                         */
0001ac  1d00              ADDS     r0,r0,#4
0001ae  6002              STR      r2,[r0,#0]
;;;595      LPC_SCU->SFSPD_6  = EMC_PIN_SET | 2;  /* PD_6:  D20                         */
0001b0  1d00              ADDS     r0,r0,#4
0001b2  6002              STR      r2,[r0,#0]
;;;596      LPC_SCU->SFSPD_7  = EMC_PIN_SET | 2;  /* PD_7:  D21                         */ 
0001b4  1d00              ADDS     r0,r0,#4
0001b6  6002              STR      r2,[r0,#0]
;;;597      LPC_SCU->SFSPD_8  = EMC_PIN_SET | 2;  /* PD_8:  D22                         */
0001b8  1d00              ADDS     r0,r0,#4
0001ba  6002              STR      r2,[r0,#0]
;;;598      LPC_SCU->SFSPD_9  = EMC_PIN_SET | 2;  /* PD_9:  D23                         */
0001bc  1d00              ADDS     r0,r0,#4
0001be  6002              STR      r2,[r0,#0]
;;;599      LPC_SCU->SFSPD_10 = EMC_PIN_SET | 2;  /* PD_10: BLS3                        */
0001c0  1d00              ADDS     r0,r0,#4
0001c2  6002              STR      r2,[r0,#0]
;;;600      LPC_SCU->SFSPD_11 = EMC_PIN_SET | 2;  /* PD_11: CS3                         */
0001c4  1d00              ADDS     r0,r0,#4
0001c6  6002              STR      r2,[r0,#0]
;;;601      LPC_SCU->SFSPD_12 = EMC_PIN_SET | 2;  /* PD_12: CS2                         */
0001c8  1d00              ADDS     r0,r0,#4
0001ca  6002              STR      r2,[r0,#0]
;;;602      LPC_SCU->SFSPD_13 = EMC_PIN_SET | 2;  /* PD_13: BLS2                        */
0001cc  1d00              ADDS     r0,r0,#4
0001ce  6002              STR      r2,[r0,#0]
;;;603      LPC_SCU->SFSPD_14 = EMC_PIN_SET | 2;  /* PD_14: DYCS2                       */
0001d0  1d00              ADDS     r0,r0,#4
0001d2  6002              STR      r2,[r0,#0]
;;;604      LPC_SCU->SFSPD_15 = EMC_PIN_SET | 2;  /* PD_15: A17                         */
0001d4  1d00              ADDS     r0,r0,#4
0001d6  6002              STR      r2,[r0,#0]
;;;605      LPC_SCU->SFSPD_16 = EMC_PIN_SET | 2;  /* PD_16: A16                         */
0001d8  1d00              ADDS     r0,r0,#4
0001da  6002              STR      r2,[r0,#0]
;;;606    
;;;607      LPC_SCU->SFSPE_0  = EMC_PIN_SET | 3;  /* PE_0:  A18                         */
0001dc  4895              LDR      r0,|L1.1076|
0001de  3080              ADDS     r0,r0,#0x80
0001e0  6001              STR      r1,[r0,#0]
;;;608      LPC_SCU->SFSPE_1  = EMC_PIN_SET | 3;  /* PE_1:  A19                         */
0001e2  1d00              ADDS     r0,r0,#4
0001e4  6001              STR      r1,[r0,#0]
;;;609      LPC_SCU->SFSPE_2  = EMC_PIN_SET | 3;  /* PE_2:  A20                         */
0001e6  1d00              ADDS     r0,r0,#4
0001e8  6001              STR      r1,[r0,#0]
;;;610      LPC_SCU->SFSPE_3  = EMC_PIN_SET | 3;  /* PE_3:  A21                         */
0001ea  1d00              ADDS     r0,r0,#4
0001ec  6001              STR      r1,[r0,#0]
;;;611      LPC_SCU->SFSPE_4  = EMC_PIN_SET | 3;  /* PE_4:  A22                         */
0001ee  1d00              ADDS     r0,r0,#4
0001f0  6001              STR      r1,[r0,#0]
;;;612      LPC_SCU->SFSPE_5  = EMC_PIN_SET | 3;  /* PE_5:  D24                         */
0001f2  1d00              ADDS     r0,r0,#4
0001f4  6001              STR      r1,[r0,#0]
;;;613      LPC_SCU->SFSPE_6  = EMC_PIN_SET | 3;  /* PE_6:  D25                         */
0001f6  1d00              ADDS     r0,r0,#4
0001f8  6001              STR      r1,[r0,#0]
;;;614      LPC_SCU->SFSPE_7  = EMC_PIN_SET | 3;  /* PE_7:  D26                         */
0001fa  1d00              ADDS     r0,r0,#4
0001fc  6001              STR      r1,[r0,#0]
;;;615      LPC_SCU->SFSPE_8  = EMC_PIN_SET | 3;  /* PE_8:  D27                         */
0001fe  1d00              ADDS     r0,r0,#4
000200  6001              STR      r1,[r0,#0]
;;;616      LPC_SCU->SFSPE_9  = EMC_PIN_SET | 3;  /* PE_9:  D28                         */
000202  1d00              ADDS     r0,r0,#4
000204  6001              STR      r1,[r0,#0]
;;;617      LPC_SCU->SFSPE_10 = EMC_PIN_SET | 3;  /* PE_10: D29                         */
000206  1d00              ADDS     r0,r0,#4
000208  6001              STR      r1,[r0,#0]
;;;618      LPC_SCU->SFSPE_11 = EMC_PIN_SET | 3;  /* PE_11: D30                         */
00020a  1d00              ADDS     r0,r0,#4
00020c  6001              STR      r1,[r0,#0]
;;;619      LPC_SCU->SFSPE_12 = EMC_PIN_SET | 3;  /* PE_12: D31                         */
00020e  1d00              ADDS     r0,r0,#4
000210  6001              STR      r1,[r0,#0]
;;;620      LPC_SCU->SFSPE_13 = EMC_PIN_SET | 3;  /* PE_13: DQMOUT3                     */
000212  1d00              ADDS     r0,r0,#4
000214  6001              STR      r1,[r0,#0]
;;;621      LPC_SCU->SFSPE_14 = EMC_PIN_SET | 3;  /* PE_14: DYCS3                       */
000216  1d00              ADDS     r0,r0,#4
000218  6001              STR      r1,[r0,#0]
;;;622      LPC_SCU->SFSPE_15 = EMC_PIN_SET | 3;  /* PE_15: CKEOUT3                     */
00021a  1d00              ADDS     r0,r0,#4
00021c  6001              STR      r1,[r0,#0]
;;;623    
;;;624      LPC_EMC->CONTROL  = 0x00000001;       /* EMC Enable                         */
00021e  f8df8218          LDR      r8,|L1.1080|
000222  f04f0901          MOV      r9,#1
000226  f8c89000          STR      r9,[r8,#0]
;;;625      LPC_EMC->CONFIG   = 0x00000000;       /* Little-endian, Clock Ratio 1:1     */
00022a  f8c84008          STR      r4,[r8,#8]
;;;626    
;;;627      div = 0;
;;;628      if (SystemCoreClock > 120000000UL) {
00022e  4883              LDR      r0,|L1.1084|
000230  2600              MOVS     r6,#0                 ;627
000232  46ba              MOV      r10,r7
000234  4285              CMP      r5,r0
000236  d920              BLS      |L1.634|
;;;629        /* Use EMC clock divider and EMC clock output delay */
;;;630        div = 1;
000238  2601              MOVS     r6,#1
;;;631        /* Following code must be executed in RAM to ensure stable operation      */
;;;632        /* LPC_CCU1->CLK_M3_EMCDIV_CFG = (1 << 5) | (1 << 2) | (1 << 1) | 1;      */
;;;633        /* LPC_CREG->CREG6 |= (1 << 16);       // EMC_CLK_DIV divided by 2        */
;;;634        /* while (!(LPC_CCU1->CLK_M3_EMCDIV_STAT & 1));                           */
;;;635    
;;;636        /* This code configures EMC clock divider and is executed in RAM          */
;;;637        for (n = 0; n < emcdivby2_szw; n++) {
00023a  2000              MOVS     r0,#0
;;;638          emcdivby2_buf[n] =  *((uint32_t *)emcdivby2_ram + n);
;;;639          *((uint32_t *)emcdivby2_ram + n) = *((uint32_t *)emcdivby2_opc + n);
00023c  4a80              LDR      r2,|L1.1088|
00023e  466f              MOV      r7,sp                 ;521
000240  ea5f7503          LSLS.W   r5,r3,#28             ;638
                  |L1.580|
000244  eb050180          ADD      r1,r5,r0,LSL #2       ;638
000248  680b              LDR      r3,[r1,#0]            ;638
00024a  f8473020          STR      r3,[r7,r0,LSL #2]     ;638
00024e  f8523020          LDR      r3,[r2,r0,LSL #2]
000252  1c40              ADDS     r0,r0,#1              ;637
000254  600b              STR      r3,[r1,#0]            ;637
000256  2805              CMP      r0,#5                 ;637
000258  d3f4              BCC      |L1.580|
;;;640        }
;;;641        __ISB();
00025a  f3bf8f6f          ISB      
;;;642        ((emcdivby2 )(emcdivby2_ram+1))(&LPC_CREG->CREG6, &LPC_CCU1->CLK_M3_EMCDIV_CFG, (1 << 5) | (1 << 2) | (1 << 1) | 1);
00025e  4970              LDR      r1,|L1.1056|
000260  2227              MOVS     r2,#0x27
000262  4b79              LDR      r3,|L1.1096|
000264  3148              ADDS     r1,r1,#0x48
000266  4877              LDR      r0,|L1.1092|
000268  4798              BLX      r3
;;;643        for (n = 0; n < emcdivby2_szw; n++) {
00026a  2000              MOVS     r0,#0
                  |L1.620|
;;;644          *((uint32_t *)emcdivby2_ram + n) = emcdivby2_buf[n];
00026c  f8571020          LDR      r1,[r7,r0,LSL #2]
000270  f8451020          STR      r1,[r5,r0,LSL #2]
000274  1c40              ADDS     r0,r0,#1              ;643
000276  2805              CMP      r0,#5                 ;643
000278  d3f8              BCC      |L1.620|
                  |L1.634|
;;;645        }
;;;646      }
;;;647    
;;;648      /* Configure EMC clock-out pins                                             */
;;;649      LPC_SCU->SFSCLK_0 = EMC_PIN_SET | 0;  /* CLK0                               */
00027a  4974              LDR      r1,|L1.1100|
00027c  20f0              MOVS     r0,#0xf0
00027e  6008              STR      r0,[r1,#0]
;;;650      LPC_SCU->SFSCLK_1 = EMC_PIN_SET | 0;  /* CLK1                               */
000280  1d09              ADDS     r1,r1,#4
000282  6008              STR      r0,[r1,#0]
;;;651      LPC_SCU->SFSCLK_2 = EMC_PIN_SET | 0;  /* CLK2                               */
000284  1d09              ADDS     r1,r1,#4
000286  6008              STR      r0,[r1,#0]
;;;652      LPC_SCU->SFSCLK_3 = EMC_PIN_SET | 0;  /* CLK3                               */
000288  1d09              ADDS     r1,r1,#4
00028a  6008              STR      r0,[r1,#0]
;;;653      
;;;654      /* Static memory configuration (chip select 0)                              */
;;;655    #if (USE_EXT_STAT_MEM_CS0)
;;;656      LPC_EMC->STATICCONFIG0  = (1 <<  7) | /* Byte lane state: use WE signal     */
00028c  208a              MOVS     r0,#0x8a
00028e  4645              MOV      r5,r8
000290  f8c80200          STR      r0,[r8,#0x200]
;;;657                                (2 <<  0) | /* Memory width 32-bit                */
;;;658                                (1 <<  3);  /* Async page mode enable             */
;;;659      
;;;660      LPC_EMC->STATICWAITOEN0 = (0 <<  0) ; /* Wait output enable: No delay       */
000294  f8c84208          STR      r4,[r8,#0x208]
;;;661      
;;;662      LPC_EMC->STATICWAITPAG0 = 1;
000298  464f              MOV      r7,r9
00029a  f8c89210          STR      r9,[r8,#0x210]
;;;663    
;;;664      /* Set Static Memory Read Delay for 90ns External NOR Flash                 */
;;;665      LPC_EMC->STATICWAITRD0  = 1 + EMC_NANOSEC(90, SystemCoreClock, div);
00029e  f8da0000          LDR      r0,[r10,#0]  ; SystemCoreClock
0002a2  1c76              ADDS     r6,r6,#1
0002a4  fbb0f4f6          UDIV     r4,r0,r6
0002a8  205a              MOVS     r0,#0x5a
0002aa  fba40100          UMULL    r0,r1,r4,r0
0002ae  46d0              MOV      r8,r10
0002b0  f8dfa168          LDR      r10,|L1.1052|
0002b4  2300              MOVS     r3,#0
0002b6  4652              MOV      r2,r10
0002b8  f7fffffe          BL       __aeabi_uldivmod
0002bc  1c40              ADDS     r0,r0,#1
0002be  f8c5020c          STR      r0,[r5,#0x20c]
;;;666      LPC_EMC->STATICCONFIG0 |= (1 << 19) ; /* Enable buffer                      */
0002c2  f8d50200          LDR      r0,[r5,#0x200]
0002c6  f4402000          ORR      r0,r0,#0x80000
0002ca  f8c50200          STR      r0,[r5,#0x200]
;;;667    #endif
;;;668      
;;;669      /* Dynamic memory configuration (chip select 0)                             */
;;;670    #if (USE_EXT_DYN_MEM_CS0)
;;;671    
;;;672      /* Set Address mapping: 128Mb(4Mx32), 4 banks, row len = 12, column len = 8 */
;;;673      LPC_EMC->DYNAMICCONFIG0    = (1 << 14) |  /* AM[14]   = 1                   */
0002ce  f44f408a          MOV      r0,#0x4500
0002d2  f8c50100          STR      r0,[r5,#0x100]
;;;674                                   (0 << 12) |  /* AM[12]   = 0                   */
;;;675                                   (2 <<  9) |  /* AM[11:9] = 2                   */
;;;676                                   (2 <<  7) ;  /* AM[8:7]  = 2                   */
;;;677    
;;;678      LPC_EMC->DYNAMICRASCAS0    = 0x00000303;  /* Latency: RAS 3, CAS 3 CCLK cyc.*/
0002d6  f2403003          MOV      r0,#0x303
0002da  f8c50104          STR      r0,[r5,#0x104]
;;;679      LPC_EMC->DYNAMICREADCONFIG = 0x00000001;  /* Command delayed by 1/2 CCLK    */
0002de  62af              STR      r7,[r5,#0x28]
;;;680    
;;;681      LPC_EMC->DYNAMICRP         = EMC_NANOSEC (20, SystemCoreClock, div);
0002e0  f04f0014          MOV      r0,#0x14
0002e4  fba40100          UMULL    r0,r1,r4,r0
0002e8  4652              MOV      r2,r10
0002ea  f04f0300          MOV      r3,#0
0002ee  f7fffffe          BL       __aeabi_uldivmod
0002f2  6328              STR      r0,[r5,#0x30]
;;;682      LPC_EMC->DYNAMICRAS        = EMC_NANOSEC (42, SystemCoreClock, div);
0002f4  202a              MOVS     r0,#0x2a
0002f6  fba40100          UMULL    r0,r1,r4,r0
0002fa  4652              MOV      r2,r10
0002fc  2300              MOVS     r3,#0
0002fe  f7fffffe          BL       __aeabi_uldivmod
000302  6368              STR      r0,[r5,#0x34]
;;;683      LPC_EMC->DYNAMICSREX       = EMC_NANOSEC (63, SystemCoreClock, div);
000304  203f              MOVS     r0,#0x3f
000306  fba40100          UMULL    r0,r1,r4,r0
00030a  4652              MOV      r2,r10
00030c  2300              MOVS     r3,#0
00030e  f7fffffe          BL       __aeabi_uldivmod
000312  4607              MOV      r7,r0
000314  63a8              STR      r0,[r5,#0x38]
;;;684      LPC_EMC->DYNAMICAPR        = EMC_NANOSEC (70, SystemCoreClock, div);
000316  2046              MOVS     r0,#0x46
000318  fba40100          UMULL    r0,r1,r4,r0
00031c  4652              MOV      r2,r10
00031e  2300              MOVS     r3,#0
000320  f7fffffe          BL       __aeabi_uldivmod
000324  63e8              STR      r0,[r5,#0x3c]
;;;685      LPC_EMC->DYNAMICDAL        = EMC_NANOSEC (70, SystemCoreClock, div);
000326  6428              STR      r0,[r5,#0x40]
;;;686      LPC_EMC->DYNAMICWR         = EMC_NANOSEC (30, SystemCoreClock, div);
000328  201e              MOVS     r0,#0x1e
00032a  fba40100          UMULL    r0,r1,r4,r0
00032e  4652              MOV      r2,r10
000330  2300              MOVS     r3,#0
000332  f7fffffe          BL       __aeabi_uldivmod
000336  4681              MOV      r9,r0
000338  6468              STR      r0,[r5,#0x44]
;;;687      LPC_EMC->DYNAMICRC         = EMC_NANOSEC (63, SystemCoreClock, div);
00033a  64af              STR      r7,[r5,#0x48]
;;;688      LPC_EMC->DYNAMICRFC        = EMC_NANOSEC (63, SystemCoreClock, div);
00033c  64ef              STR      r7,[r5,#0x4c]
;;;689      LPC_EMC->DYNAMICXSR        = EMC_NANOSEC (63, SystemCoreClock, div);
00033e  652f              STR      r7,[r5,#0x50]
;;;690      LPC_EMC->DYNAMICRRD        = EMC_NANOSEC (14, SystemCoreClock, div);
000340  200e              MOVS     r0,#0xe
000342  fba40100          UMULL    r0,r1,r4,r0
000346  4652              MOV      r2,r10
000348  2300              MOVS     r3,#0
00034a  f7fffffe          BL       __aeabi_uldivmod
00034e  6568              STR      r0,[r5,#0x54]
;;;691      LPC_EMC->DYNAMICMRD        = EMC_NANOSEC (30, SystemCoreClock, div);
000350  f8c59058          STR      r9,[r5,#0x58]
;;;692    
;;;693      WaitUs (100);
000354  2064              MOVS     r0,#0x64
000356  f7fffffe          BL       WaitUs
;;;694      LPC_EMC->DYNAMICCONTROL    = 0x00000183;  /* Issue NOP command              */
00035a  f2401483          MOV      r4,#0x183
00035e  622c              STR      r4,[r5,#0x20]
;;;695      WaitUs (10);
000360  200a              MOVS     r0,#0xa
000362  f7fffffe          BL       WaitUs
;;;696      LPC_EMC->DYNAMICCONTROL    = 0x00000103;  /* Issue PALL command             */
000366  f2401003          MOV      r0,#0x103
00036a  6228              STR      r0,[r5,#0x20]
;;;697      WaitUs (1);
00036c  2001              MOVS     r0,#1
00036e  f7fffffe          BL       WaitUs
;;;698      LPC_EMC->DYNAMICCONTROL    = 0x00000183;  /* Issue NOP command              */
000372  622c              STR      r4,[r5,#0x20]
;;;699      WaitUs (1);
000374  2001              MOVS     r0,#1
000376  f7fffffe          BL       WaitUs
;;;700      LPC_EMC->DYNAMICREFRESH    = EMC_NANOSEC(  200, SystemCoreClock, div) / 16 + 1;
00037a  f8d80000          LDR      r0,[r8,#0]  ; SystemCoreClock
00037e  21c8              MOVS     r1,#0xc8
000380  fbb0f0f6          UDIV     r0,r0,r6
000384  fba00101          UMULL    r0,r1,r0,r1
000388  4652              MOV      r2,r10
00038a  2300              MOVS     r3,#0
00038c  f7fffffe          BL       __aeabi_uldivmod
000390  0900              LSRS     r0,r0,#4
000392  ea407001          ORR      r0,r0,r1,LSL #28
000396  1c40              ADDS     r0,r0,#1
000398  6268              STR      r0,[r5,#0x24]
;;;701      WaitUs (10);
00039a  f04f000a          MOV      r0,#0xa
00039e  f7fffffe          BL       WaitUs
;;;702      LPC_EMC->DYNAMICREFRESH    = EMC_NANOSEC(15625, SystemCoreClock, div) / 16 + 1;
0003a2  f8d80000          LDR      r0,[r8,#0]  ; SystemCoreClock
0003a6  f6435109          MOV      r1,#0x3d09
0003aa  fbb0f0f6          UDIV     r0,r0,r6
0003ae  fba00101          UMULL    r0,r1,r0,r1
0003b2  4652              MOV      r2,r10
0003b4  2300              MOVS     r3,#0
0003b6  f7fffffe          BL       __aeabi_uldivmod
0003ba  0900              LSRS     r0,r0,#4
0003bc  ea407001          ORR      r0,r0,r1,LSL #28
0003c0  1c40              ADDS     r0,r0,#1
0003c2  6268              STR      r0,[r5,#0x24]
;;;703      WaitUs (10);
0003c4  f04f000a          MOV      r0,#0xa
0003c8  f7fffffe          BL       WaitUs
;;;704      LPC_EMC->DYNAMICCONTROL    = 0x00000083;  /* Issue MODE command             */
0003cc  2083              MOVS     r0,#0x83
0003ce  6228              STR      r0,[r5,#0x20]
;;;705    
;;;706      /* Mode register: Burst Length: 4, Burst Type: Sequential, CAS Latency: 3   */
;;;707      WR_MODE(((3 << 4) | 2) << 12);
0003d0  481f              LDR      r0,|L1.1104|
0003d2  6800              LDR      r0,[r0,#0]
;;;708    
;;;709      WaitUs (10);
0003d4  200a              MOVS     r0,#0xa
0003d6  f7fffffe          BL       WaitUs
;;;710      LPC_EMC->DYNAMICCONTROL    = 0x00000002;  /* Issue NORMAL command           */
0003da  2002              MOVS     r0,#2
0003dc  6228              STR      r0,[r5,#0x20]
;;;711      LPC_EMC->DYNAMICCONFIG0   |= (1 << 19);   /* Enable buffer                  */
0003de  f8d50100          LDR      r0,[r5,#0x100]
0003e2  f4402000          ORR      r0,r0,#0x80000
0003e6  f8c50100          STR      r0,[r5,#0x100]
;;;712    #endif
;;;713    }
0003ea  b006              ADD      sp,sp,#0x18
0003ec  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1008|
                          DCD      0x4000520c
                  |L1.1012|
                          DCD      0x01000800
                  |L1.1016|
                          DCD      0x40050000
                  |L1.1020|
                          DCD      0x06272080
                  |L1.1024|
                          DCD      0x09000800
                  |L1.1028|
                          DCD      0x060e0880
                  |L1.1032|
                          DCD      0x06160000
                  |L1.1036|
                          DCD      0x00302000
                  |L1.1040|
                          DCD      0x0600081c
                  |L1.1044|
                          DCD      0x03000804
                  |L1.1048|
                          DCD      ||.data||
                  |L1.1052|
                          DCD      0x3b9aca00
                  |L1.1056|
                          DCD      0x40051430
                  |L1.1060|
                          DCD      0x04c4b400
                  |L1.1064|
                          DCD      0x40086d00
                  |L1.1068|
                          DCD      0x40086080
                  |L1.1072|
                          DCD      0x40086510
                  |L1.1076|
                          DCD      0x40086680
                  |L1.1080|
                          DCD      0x40005000
                  |L1.1084|
                          DCD      0x07270e00
                  |L1.1088|
                          DCD      ||.constdata||
                  |L1.1092|
                          DCD      0x4004312c
                  |L1.1096|
                          DCD      0x10000001
                  |L1.1100|
                          DCD      0x40086c00
                  |L1.1104|
                          DCD      0x28032000
                          ENDP

                  MeasureFreq PROC
;;;718     *----------------------------------------------------------------------------*/
;;;719    uint32_t MeasureFreq (uint32_t clk_sel) {
000454  4967              LDR      r1,|L1.1524|
;;;720      uint32_t fcnt, rcnt, fout;
;;;721    
;;;722      /* Set register values */
;;;723      LPC_CGU->FREQ_MON &= ~(1 << 23);                /* Stop frequency counters  */
000456  694a              LDR      r2,[r1,#0x14]
000458  f4220200          BIC      r2,r2,#0x800000
00045c  614a              STR      r2,[r1,#0x14]
;;;724      LPC_CGU->FREQ_MON  = (clk_sel << 24) | 511;     /* RCNT == 511              */
00045e  f24012ff          MOV      r2,#0x1ff
000462  eb026000          ADD      r0,r2,r0,LSL #24
000466  6148              STR      r0,[r1,#0x14]
;;;725      LPC_CGU->FREQ_MON |= (1 << 23);                 /* Start RCNT and FCNT      */
000468  6948              LDR      r0,[r1,#0x14]
00046a  f4400000          ORR      r0,r0,#0x800000
00046e  6148              STR      r0,[r1,#0x14]
000470  e004              B        |L1.1148|
                  |L1.1138|
;;;726      while (LPC_CGU->FREQ_MON & (1 << 23)) {
;;;727        fcnt = (LPC_CGU->FREQ_MON >> 9) & 0x3FFF;
;;;728        rcnt = (LPC_CGU->FREQ_MON     ) & 0x01FF;
000472  694a              LDR      r2,[r1,#0x14]
000474  f3c20208          UBFX     r2,r2,#0,#9
;;;729        if (fcnt == 0 && rcnt == 0) {
000478  4310              ORRS     r0,r0,r2
00047a  d009              BEQ      |L1.1168|
                  |L1.1148|
00047c  6948              LDR      r0,[r1,#0x14]         ;726
00047e  0200              LSLS     r0,r0,#8              ;726
000480  2800              CMP      r0,#0                 ;726
;;;730          return (0);                                 /* No input clock present   */
;;;731        }
;;;732      }
;;;733      fcnt = (LPC_CGU->FREQ_MON >> 9) & 0x3FFF;
000482  6948              LDR      r0,[r1,#0x14]
000484  f3c0204d          UBFX     r0,r0,#9,#14
000488  dbf3              BLT      |L1.1138|
;;;734      fout = fcnt * (12000000U/511U);                 /* FCNT * (IRC_CLK / RCNT)  */
00048a  f64531bb          MOV      r1,#0x5bbb
00048e  4348              MULS     r0,r1,r0
                  |L1.1168|
;;;735    
;;;736      return (fout);
;;;737    }
000490  4770              BX       lr
;;;738    
                          ENDP

                  GetClkSel PROC
;;;772     *----------------------------------------------------------------------------*/
;;;773    int32_t GetClkSel (uint32_t clk_src) {
000492  4602              MOV      r2,r0
;;;774      uint32_t reg;
;;;775      int32_t clk_sel = -1;
;;;776    
;;;777      switch (clk_src) {
;;;778        case CLK_SRC_IRC:
;;;779        case CLK_SRC_ENET_RX:
;;;780        case CLK_SRC_ENET_TX:
;;;781        case CLK_SRC_GP_CLKIN:
;;;782          return (clk_src);
;;;783    
;;;784        case CLK_SRC_32KHZ:
;;;785          return ((LPC_CREG->CREG0 & 0x0A) != 0x02) ? (-1) : (CLK_SRC_32KHZ);
;;;786        case CLK_SRC_XTAL:
;;;787         return  (LPC_CGU->XTAL_OSC_CTRL & 1)       ? (-1) : (CLK_SRC_XTAL);
000494  4957              LDR      r1,|L1.1524|
000496  f04f30ff          MOV      r0,#0xffffffff        ;775
00049a  2a11              CMP      r2,#0x11              ;777
00049c  d20b              BCS      |L1.1206|
00049e  e8dff002          TBB      [pc,r2]               ;777
0004a2  0b09              DCB      0x0b,0x09
0004a4  0909090a          DCB      0x09,0x09,0x09,0x0a
0004a8  13181a1c          DCB      0x13,0x18,0x1a,0x1c
0004ac  0a0a2325          DCB      0x0a,0x0a,0x23,0x25
0004b0  27292b00          DCB      0x27,0x29,0x2b,0x00
0004b4  4610              MOV      r0,r2                 ;782
                  |L1.1206|
;;;788        
;;;789        case CLK_SRC_PLL0U: reg = LPC_CGU->PLL0USB_CTRL;    break;
;;;790        case CLK_SRC_PLL0A: reg = LPC_CGU->PLL0AUDIO_CTRL;  break;
;;;791        case CLK_SRC_PLL1:  reg = (LPC_CGU->PLL1_STAT & 1) ? (LPC_CGU->PLL1_CTRL) : (0); break;
;;;792    
;;;793        case CLK_SRC_IDIVA: reg = LPC_CGU->IDIVA_CTRL;      break;
;;;794        case CLK_SRC_IDIVB: reg = LPC_CGU->IDIVB_CTRL;      break;
;;;795        case CLK_SRC_IDIVC: reg = LPC_CGU->IDIVC_CTRL;      break;
;;;796        case CLK_SRC_IDIVD: reg = LPC_CGU->IDIVD_CTRL;      break;
;;;797        case CLK_SRC_IDIVE: reg = LPC_CGU->IDIVE_CTRL;      break;
;;;798        
;;;799        default:
;;;800          return (clk_sel);
;;;801      }
;;;802      if (!(reg & 1)) {
;;;803        clk_sel = (reg >> 24) & 0x1F;
;;;804      }
;;;805      return (clk_sel);
;;;806    }
0004b6  4770              BX       lr
0004b8  494f              LDR      r1,|L1.1528|
0004ba  6849              LDR      r1,[r1,#4]            ;785
0004bc  f001010a          AND      r1,r1,#0xa            ;785
0004c0  2902              CMP      r1,#2                 ;785
0004c2  d1f8              BNE      |L1.1206|
0004c4  2000              MOVS     r0,#0                 ;785
                  |L1.1222|
0004c6  4770              BX       lr
0004c8  6989              LDR      r1,[r1,#0x18]         ;787
0004ca  07c9              LSLS     r1,r1,#31             ;787
0004cc  d1fb              BNE      |L1.1222|
0004ce  2006              MOVS     r0,#6                 ;787
                  |L1.1232|
0004d0  4770              BX       lr
0004d2  6a09              LDR      r1,[r1,#0x20]         ;789
0004d4  e011              B        |L1.1274|
0004d6  6b09              LDR      r1,[r1,#0x30]         ;790
0004d8  e00f              B        |L1.1274|
0004da  6c0a              LDR      r2,[r1,#0x40]         ;791
0004dc  07d2              LSLS     r2,r2,#31             ;791
0004de  d001              BEQ      |L1.1252|
0004e0  6c49              LDR      r1,[r1,#0x44]         ;791
0004e2  e00a              B        |L1.1274|
                  |L1.1252|
0004e4  2100              MOVS     r1,#0                 ;791
0004e6  e008              B        |L1.1274|
0004e8  6c89              LDR      r1,[r1,#0x48]         ;793
0004ea  e006              B        |L1.1274|
0004ec  6cc9              LDR      r1,[r1,#0x4c]         ;794
0004ee  e004              B        |L1.1274|
0004f0  6d09              LDR      r1,[r1,#0x50]         ;795
0004f2  e002              B        |L1.1274|
0004f4  6d49              LDR      r1,[r1,#0x54]         ;796
0004f6  e000              B        |L1.1274|
0004f8  6d89              LDR      r1,[r1,#0x58]         ;797
                  |L1.1274|
0004fa  07ca              LSLS     r2,r1,#31             ;802
0004fc  d1e8              BNE      |L1.1232|
0004fe  f3c16004          UBFX     r0,r1,#24,#5          ;803
000502  4770              BX       lr
;;;807    
                          ENDP

                  GetClockFreq PROC
;;;811     *----------------------------------------------------------------------------*/
;;;812    uint32_t GetClockFreq (uint32_t clk_src) {
000504  e92d43f0          PUSH     {r4-r9,lr}
;;;813      uint32_t tmp;
;;;814      uint32_t mul        =  1;
000508  2701              MOVS     r7,#1
;;;815      uint32_t div        =  1;
;;;816      uint32_t main_freq  =  0;
;;;817      int32_t  clk_sel    = clk_src;
;;;818    
;;;819      do {
;;;820        switch (clk_sel) {      
;;;821          case CLK_SRC_32KHZ:    main_freq = CLK_32KHZ;     break; 
;;;822          case CLK_SRC_IRC:      main_freq = CLK_IRC;       break;
00050a  4d3c              LDR      r5,|L1.1532|
;;;823          case CLK_SRC_ENET_RX:  main_freq = CLK_ENET_RX;   break; 
00050c  4e3c              LDR      r6,|L1.1536|
;;;824          case CLK_SRC_ENET_TX:  main_freq = CLK_ENET_TX;   break; 
;;;825          case CLK_SRC_GP_CLKIN: main_freq = CLK_GP_CLKIN;  break; 
;;;826          case CLK_SRC_XTAL:     main_freq = CLK_XTAL;      break;
;;;827      
;;;828          case CLK_SRC_IDIVA: div *= ((LPC_CGU->IDIVA_CTRL >> 2) & 0x3) + 1; break;
00050e  f8dfc0e4          LDR      r12,|L1.1524|
000512  463c              MOV      r4,r7                 ;815
                  |L1.1300|
000514  2811              CMP      r0,#0x11              ;820
000516  d24d              BCS      |L1.1460|
000518  e8dff000          TBB      [pc,r0]               ;820
00051c  090d0c0c          DCB      0x09,0x0d,0x0c,0x0c
000520  0d4c0d49          DCB      0x0d,0x4c,0x0d,0x49
000524  49274c4c          DCB      0x49,0x27,0x4c,0x4c
000528  1215181b          DCB      0x12,0x15,0x18,0x1b
00052c  1e00              DCB      0x1e,0x00
00052e  f44f4500          MOV      r5,#0x8000            ;821
000532  e000              B        |L1.1334|
000534  4635              MOV      r5,r6                 ;824
                  |L1.1334|
;;;829          case CLK_SRC_IDIVB: div *= ((LPC_CGU->IDIVB_CTRL >> 2) & 0x3) + 1; break;
;;;830          case CLK_SRC_IDIVC: div *= ((LPC_CGU->IDIVC_CTRL >> 2) & 0x3) + 1; break;
;;;831          case CLK_SRC_IDIVD: div *= ((LPC_CGU->IDIVD_CTRL >> 2) & 0x3) + 1; break;
;;;832          case CLK_SRC_IDIVE: div *= ((LPC_CGU->IDIVE_CTRL >> 2) & 0x3) + 1; break;
;;;833      
;;;834          case CLK_SRC_PLL0U: /* Not implemented */  break;
;;;835          case CLK_SRC_PLL0A: /* Not implemented */  break;
;;;836          
;;;837          case CLK_SRC_PLL1:
;;;838            tmp = GetPLL1Param ();
;;;839            mul *= (tmp     ) & 0xFF;       /* PLL input clock multiplier         */
;;;840            div *= (tmp >> 8) & 0xFF;       /* PLL input clock divider            */
;;;841            break;
;;;842          
;;;843          default:
;;;844            return (0);                     /* Clock not running or not supported */
;;;845        }
;;;846        if (main_freq == 0) {
;;;847          clk_sel = GetClkSel (clk_sel);
;;;848        }
;;;849      }
;;;850      while (main_freq == 0);
;;;851    
;;;852      return ((main_freq * mul) / div);
000536  437d              MULS     r5,r7,r5
000538  fbb5f0f4          UDIV     r0,r5,r4
                  |L1.1340|
;;;853    }
00053c  e8bd83f0          POP      {r4-r9,pc}
000540  f8dc1048          LDR      r1,[r12,#0x48]        ;828
000544  e00a              B        |L1.1372|
000546  f8dc104c          LDR      r1,[r12,#0x4c]        ;829
00054a  e007              B        |L1.1372|
00054c  f8dc1050          LDR      r1,[r12,#0x50]        ;830
000550  e004              B        |L1.1372|
000552  f8dc1054          LDR      r1,[r12,#0x54]        ;831
000556  e001              B        |L1.1372|
000558  f8dc1058          LDR      r1,[r12,#0x58]        ;832
                  |L1.1372|
00055c  f3c10181          UBFX     r1,r1,#2,#2           ;832
000560  f1010101          ADD      r1,r1,#1              ;832
000564  fb04f401          MUL      r4,r4,r1              ;832
000568  e021              B        |L1.1454|
00056a  f8dc1044          LDR      r1,[r12,#0x44]        ;832
00056e  f3c14307          UBFX     r3,r1,#16,#8          ;832
000572  f1030901          ADD      r9,r3,#1              ;832
000576  f3c12801          UBFX     r8,r1,#8,#2           ;832
00057a  f04f0301          MOV      r3,#1                 ;832
00057e  f3c13201          UBFX     r2,r1,#12,#2          ;832
000582  fa03f308          LSL      r3,r3,r8              ;832
000586  f1020201          ADD      r2,r2,#1              ;832
00058a  ea5f7881          LSLS     r8,r1,#30             ;832
00058e  d502              BPL      |L1.1430|
000590  0609              LSLS     r1,r1,#24             ;832
000592  d403              BMI      |L1.1436|
000594  e004              B        |L1.1440|
                  |L1.1430|
000596  f0110fc0          TST      r1,#0xc0              ;832
00059a  d101              BNE      |L1.1440|
                  |L1.1436|
00059c  0059              LSLS     r1,r3,#1              ;832
00059e  434a              MULS     r2,r1,r2              ;832
                  |L1.1440|
0005a0  ea492102          ORR      r1,r9,r2,LSL #8       ;832
0005a4  b2ca              UXTB     r2,r1                 ;839
0005a6  f3c12107          UBFX     r1,r1,#8,#8           ;840
0005aa  4357              MULS     r7,r2,r7              ;839
0005ac  434c              MULS     r4,r1,r4              ;840
                  |L1.1454|
0005ae  f7fffffe          BL       GetClkSel
0005b2  e7af              B        |L1.1300|
                  |L1.1460|
0005b4  2000              MOVS     r0,#0                 ;844
0005b6  e7c1              B        |L1.1340|
;;;854    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;858     *----------------------------------------------------------------------------*/
;;;859    void SystemCoreClockUpdate (void) {
0005b8  480e              LDR      r0,|L1.1524|
0005ba  b500              PUSH     {lr}
;;;860      /* Check BASE_M3_CLK connection */
;;;861      uint32_t base_src = (LPC_CGU->BASE_M3_CLK >> 24) & 0x1F;
0005bc  6ec0              LDR      r0,[r0,#0x6c]
0005be  f3c06004          UBFX     r0,r0,#24,#5
;;;862    
;;;863      /* Update core clock frequency */
;;;864      SystemCoreClock = GetClockFreq (base_src);
0005c2  f7fffffe          BL       GetClockFreq
0005c6  490f              LDR      r1,|L1.1540|
0005c8  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;865    }
0005ca  bd00              POP      {pc}
;;;866    
                          ENDP

                  SystemInit PROC
;;;872     *----------------------------------------------------------------------------*/
;;;873    void SystemInit (void) {
0005cc  b510              PUSH     {r4,lr}
;;;874      /* Disable SysTick timer                                                    */
;;;875      SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk);
0005ce  f04f20e0          MOV      r0,#0xe000e000
0005d2  6901              LDR      r1,[r0,#0x10]
0005d4  f0210103          BIC      r1,r1,#3
0005d8  6101              STR      r1,[r0,#0x10]
;;;876    
;;;877      /* Set vector table pointer */
;;;878      SCB->VTOR = ((uint32_t)(&__Vectors)) & 0xFFF00000UL;
0005da  480b              LDR      r0,|L1.1544|
0005dc  490b              LDR      r1,|L1.1548|
0005de  f36f0013          BFC      r0,#0,#20
0005e2  6008              STR      r0,[r1,#0]
;;;879    
;;;880      /* Configure PLL0 and PLL1, connect CPU clock to selected clock source */
;;;881      SetClock();
0005e4  f7fffffe          BL       SetClock
;;;882    
;;;883      /* Update SystemCoreClock variable */
;;;884      SystemCoreClockUpdate();
0005e8  f7fffffe          BL       SystemCoreClockUpdate
;;;885    
;;;886      /* Configure External Memory Controller */
;;;887      SystemInit_ExtMemCtl ();
0005ec  e8bd4010          POP      {r4,lr}
0005f0  e7fe              B        SystemInit_ExtMemCtl
;;;888    }
                          ENDP

0005f2  0000              DCW      0x0000
                  |L1.1524|
                          DCD      0x40050000
                  |L1.1528|
                          DCD      0x40043000
                  |L1.1532|
                          DCD      0x00b71b00
                  |L1.1536|
                          DCD      0x02faf080
                  |L1.1540|
                          DCD      ||.data||
                  |L1.1544|
                          DCD      __Vectors
                  |L1.1548|
                          DCD      0xe000ed08

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  emcdivby2_opc
000000  6803f443          DCW      0x6803,0xf443
000004  33806003          DCW      0x3380,0x6003
000008  600a684b          DCW      0x600a,0x684b
00000c  07dbd0fc          DCW      0x07db,0xd0fc
000010  47700000          DCW      0x4770,0x0000

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x00b71b00

;*** Start embedded assembler ***

#line 1 "system_LPC18xx.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_system_LPC18xx_c_5d646a67____REV16|
#line 130 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_system_LPC18xx_c_5d646a67____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___16_system_LPC18xx_c_5d646a67____REVSH|
#line 145
|__asm___16_system_LPC18xx_c_5d646a67____REVSH| PROC
#line 146

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
