; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\usbd_core.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\usbd_core.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\app -I.\USBStack\INC -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC18xx -D__MICROLIB --omf_browse=.\obj\usbd_core.crf USBStack\SRC\usbd_core.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  usbd_init PROC
;;;56     
;;;57     void usbd_init (void) {
000000  4995              LDR      r1,|L1.600|
000002  b510              PUSH     {r4,lr}
;;;58       USBD_HighSpeed     = __FALSE;
000004  2000              MOVS     r0,#0
000006  70c8              STRB     r0,[r1,#3]
;;;59     
;;;60       usbd_class_init();
000008  f7fffffe          BL       usbd_class_init
;;;61       USBD_RTX_TaskInit();
00000c  f7fffffe          BL       USBD_RTX_TaskInit
;;;62     
;;;63       USBD_Init();
000010  e8bd4010          POP      {r4,lr}
000014  f7ffbffe          B.W      USBD_Init
;;;64     }
;;;65     
                          ENDP

                  usbd_connect PROC
;;;73     
;;;74     void usbd_connect (BOOL con) {
000018  f7ffbffe          B.W      USBD_Connect
;;;75     
;;;76       USBD_Connect (con);
;;;77     }
;;;78     
                          ENDP

                  usbd_reset_core PROC
;;;85     
;;;86     void usbd_reset_core (void) {
00001c  488f              LDR      r0,|L1.604|
;;;87     
;;;88       USBD_DeviceStatus  = usbd_power;
;;;89       USBD_DeviceAddress = 0;
;;;90       USBD_Configuration = 0;
;;;91       USBD_EndPointMask  = 0x00010001;
00001e  f04f1201          MOV      r2,#0x10001
000022  7801              LDRB     r1,[r0,#0]            ;88  ; usbd_power
000024  488c              LDR      r0,|L1.600|
000026  80c1              STRH     r1,[r0,#6]            ;88
000028  2100              MOVS     r1,#0                 ;89
00002a  7001              STRB     r1,[r0,#0]            ;89
00002c  7041              STRB     r1,[r0,#1]            ;90
00002e  e9c02102          STRD     r2,r1,[r0,#8]
;;;92       USBD_EndPointHalt  = 0x00000000;
;;;93       USBD_EndPointStall = 0x00000000;
000032  6101              STR      r1,[r0,#0x10]  ; USBD_EndPointStall
;;;94     }
000034  4770              BX       lr
;;;95     
                          ENDP

                  usbd_configured PROC
;;;103    
;;;104    BOOL usbd_configured (void) {
000036  4888              LDR      r0,|L1.600|
;;;105    
;;;106      if (USBD_Configuration)
000038  7840              LDRB     r0,[r0,#1]  ; USBD_Configuration
00003a  2800              CMP      r0,#0                 ;104
00003c  d000              BEQ      |L1.64|
;;;107        return (__TRUE);
00003e  2001              MOVS     r0,#1
                  |L1.64|
;;;108    
;;;109      return (__FALSE);
;;;110    }
000040  4770              BX       lr
;;;111    
                          ENDP

                  USBD_SetupStage PROC
;;;118    
;;;119    void USBD_SetupStage (void) {
000042  4985              LDR      r1,|L1.600|
;;;120      USBD_ReadEP(0x00, (U8 *)&USBD_SetupPacket);
000044  311c              ADDS     r1,r1,#0x1c
000046  2000              MOVS     r0,#0
000048  f7ffbffe          B.W      USBD_ReadEP
;;;121    }
;;;122    
                          ENDP

                  USBD_DataInStage PROC
;;;129    
;;;130    void USBD_DataInStage (void) {
00004c  b510              PUSH     {r4,lr}
;;;131      U32 cnt;
;;;132    
;;;133      if (USBD_EP0Data.Count > usbd_max_packet0) {
00004e  4c82              LDR      r4,|L1.600|
000050  4883              LDR      r0,|L1.608|
000052  3414              ADDS     r4,r4,#0x14
000054  88a2              LDRH     r2,[r4,#4]  ; USBD_EP0Data
000056  7801              LDRB     r1,[r0,#0]  ; usbd_max_packet0
000058  428a              CMP      r2,r1
00005a  d900              BLS      |L1.94|
;;;134        cnt = usbd_max_packet0;
00005c  b2ca              UXTB     r2,r1
                  |L1.94|
;;;135      } else {
;;;136        cnt = USBD_EP0Data.Count;
;;;137      }
;;;138      if (!cnt) USBD_ZLP = 0;
00005e  b912              CBNZ     r2,|L1.102|
000060  497d              LDR      r1,|L1.600|
000062  2000              MOVS     r0,#0
000064  7108              STRB     r0,[r1,#4]
                  |L1.102|
;;;139      cnt = USBD_WriteEP(0x80, USBD_EP0Data.pData, cnt);
000066  2080              MOVS     r0,#0x80
000068  6821              LDR      r1,[r4,#0]  ; USBD_EP0Data
00006a  f7fffffe          BL       USBD_WriteEP
;;;140      USBD_EP0Data.pData += cnt;
00006e  6821              LDR      r1,[r4,#0]  ; USBD_EP0Data
000070  4401              ADD      r1,r1,r0
;;;141      USBD_EP0Data.Count -= cnt;
000072  6021              STR      r1,[r4,#0]  ; USBD_EP0Data
000074  88a1              LDRH     r1,[r4,#4]  ; USBD_EP0Data
000076  1a08              SUBS     r0,r1,r0
000078  80a0              STRH     r0,[r4,#4]
;;;142    }
00007a  bd10              POP      {r4,pc}
;;;143    
                          ENDP

                  USBD_DataOutStage PROC
;;;150    
;;;151    void USBD_DataOutStage (void) {
00007c  b510              PUSH     {r4,lr}
;;;152      U32 cnt;
;;;153    
;;;154      cnt = USBD_ReadEP(0x00, USBD_EP0Data.pData);
00007e  4c76              LDR      r4,|L1.600|
000080  2000              MOVS     r0,#0
000082  3414              ADDS     r4,r4,#0x14
000084  6821              LDR      r1,[r4,#0]  ; USBD_EP0Data
000086  f7fffffe          BL       USBD_ReadEP
;;;155      USBD_EP0Data.pData += cnt;
00008a  6821              LDR      r1,[r4,#0]  ; USBD_EP0Data
00008c  4401              ADD      r1,r1,r0
;;;156      USBD_EP0Data.Count -= cnt;
00008e  6021              STR      r1,[r4,#0]  ; USBD_EP0Data
000090  88a1              LDRH     r1,[r4,#4]  ; USBD_EP0Data
000092  1a08              SUBS     r0,r1,r0
000094  80a0              STRH     r0,[r4,#4]
;;;157    }
000096  bd10              POP      {r4,pc}
;;;158    
                          ENDP

                  USBD_StatusInStage PROC
;;;165    
;;;166    void USBD_StatusInStage (void) {
000098  2200              MOVS     r2,#0
;;;167      USBD_WriteEP(0x80, NULL, 0);
00009a  4611              MOV      r1,r2
00009c  2080              MOVS     r0,#0x80
00009e  f7ffbffe          B.W      USBD_WriteEP
;;;168    }
;;;169    
                          ENDP

                  USBD_StatusOutStage PROC
;;;176    
;;;177    void USBD_StatusOutStage (void) {
0000a2  4970              LDR      r1,|L1.612|
;;;178      USBD_ReadEP(0x00, USBD_EP0Buf);
0000a4  2000              MOVS     r0,#0
0000a6  f7ffbffe          B.W      USBD_ReadEP
;;;179    }
;;;180    
                          ENDP

                  USBD_EndPoint0 PROC
;;;622    
;;;623    void USBD_EndPoint0 (U32 event) {
0000aa  e92d47f0          PUSH     {r4-r10,lr}
;;;624    
;;;625      if (event & USBD_EVT_SETUP) {
;;;626        USBD_SetupStage();
;;;627        USBD_DirCtrlEP(USBD_SetupPacket.bmRequestType.Dir);
0000ae  4f6a              LDR      r7,|L1.600|
0000b0  4606              MOV      r6,r0                 ;623
0000b2  f107071c          ADD      r7,r7,#0x1c
0000b6  4d68              LDR      r5,|L1.600|
0000b8  0780              LSLS     r0,r0,#30             ;625
0000ba  f04f0900          MOV      r9,#0                 ;625
;;;628        USBD_EP0Data.Count = USBD_SetupPacket.wLength;       /* Number of bytes to transfer */
0000be  f1a70408          SUB      r4,r7,#8
0000c2  d521              BPL      |L1.264|
0000c4  f7fffffe          BL       USBD_SetupStage
0000c8  7838              LDRB     r0,[r7,#0]            ;627  ; USBD_SetupPacket
0000ca  09c0              LSRS     r0,r0,#7              ;627
0000cc  f7fffffe          BL       USBD_DirCtrlEP
0000d0  88f8              LDRH     r0,[r7,#6]  ; USBD_SetupPacket
0000d2  80a0              STRH     r0,[r4,#4]
;;;629    
;;;630        switch (USBD_SetupPacket.bmRequestType.Type) {
0000d4  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
0000d6  f3c01141          UBFX     r1,r0,#5,#2
0000da  b111              CBZ      r1,|L1.226|
0000dc  2901              CMP      r1,#1
0000de  d168              BNE      |L1.434|
0000e0  e059              B        |L1.406|
                  |L1.226|
;;;631    
;;;632          case REQUEST_STANDARD:
;;;633            switch (USBD_SetupPacket.bRequest) {
0000e2  7879              LDRB     r1,[r7,#1]  ; USBD_SetupPacket
;;;634    
;;;635              case USB_REQUEST_GET_STATUS:
;;;636                if (!USBD_ReqGetStatus()) {
;;;637                  goto stall;
;;;638                }
;;;639                USBD_DataInStage();
;;;640                break;
;;;641    
;;;642              case USB_REQUEST_CLEAR_FEATURE:
;;;643                if (!USBD_ReqSetClrFeature(0)) {
;;;644                  goto stall;
;;;645                }
;;;646                USBD_StatusInStage();
;;;647    #ifdef __RTX
;;;648                if (__rtx) {
;;;649                  if (USBD_RTX_CoreTask) {
;;;650                    usbd_os_evt_set(USBD_EVT_CLR_FEATURE, USBD_RTX_CoreTask);
;;;651                  }
;;;652                } else {
;;;653    #endif
;;;654                  if (USBD_P_Feature_Event) {
0000e4  f8df8180          LDR      r8,|L1.616|
0000e8  290c              CMP      r1,#0xc               ;633
0000ea  d262              BCS      |L1.434|
0000ec  e8dff001          TBB      [pc,r1]               ;633
0000f0  060d6114          DCB      0x06,0x0d,0x61,0x14
0000f4  61192861          DCB      0x61,0x19,0x28,0x61
0000f8  2c323948          DCB      0x2c,0x32,0x39,0x48
0000fc  f7fffffe          BL       USBD_ReqGetStatus
000100  e020              B        |L1.324|
000102  bf00              NOP                            ;639
                  |L1.260|
000104  f7fffffe          BL       USBD_DataInStage
                  |L1.264|
000108  e05f              B        |L1.458|
00010a  2000              MOVS     r0,#0                 ;643
00010c  e005              B        |L1.282|
00010e  bf00              NOP                            ;646
                  |L1.272|
000110  f7fffffe          BL       USBD_StatusInStage
000114  4640              MOV      r0,r8
000116  e039              B        |L1.396|
;;;655                    USBD_P_Feature_Event();
;;;656                  }
;;;657    #ifdef __RTX
;;;658                }
;;;659    #endif
;;;660                break;
;;;661    
;;;662              case USB_REQUEST_SET_FEATURE:
;;;663                if (!USBD_ReqSetClrFeature(1)) {
000118  2001              MOVS     r0,#1
                  |L1.282|
00011a  f7fffffe          BL       USBD_ReqSetClrFeature
00011e  b370              CBZ      r0,|L1.382|
000120  e7f6              B        |L1.272|
000122  f0100f1f          TST      r0,#0x1f
000126  d144              BNE      |L1.434|
000128  78b8              LDRB     r0,[r7,#2]  ; USBD_SetupPacket
;;;664                  goto stall;
;;;665                }
;;;666                USBD_StatusInStage();
;;;667    #ifdef __RTX
;;;668                if (__rtx) {
;;;669                  if (USBD_RTX_CoreTask) {
;;;670                    usbd_os_evt_set(USBD_EVT_SET_FEATURE, USBD_RTX_CoreTask);
;;;671                  }
;;;672                } else {
;;;673    #endif
;;;674                  if (USBD_P_Feature_Event) {
;;;675                    USBD_P_Feature_Event();
;;;676                  }
;;;677    #ifdef __RTX
;;;678                }
;;;679    #endif
;;;680                break;
;;;681    
;;;682              case USB_REQUEST_SET_ADDRESS:
;;;683                if (!USBD_ReqSetAddress()) {
;;;684                  goto stall;
;;;685                }
;;;686                USBD_SetAddress(USBD_DeviceAddress & 0x7F, 1);
00012a  2101              MOVS     r1,#1
00012c  f0400080          ORR      r0,r0,#0x80
000130  7028              STRB     r0,[r5,#0]
000132  f000007f          AND      r0,r0,#0x7f
000136  f7fffffe          BL       USBD_SetAddress
;;;687                USBD_StatusInStage();
00013a  f7fffffe          BL       USBD_StatusInStage
00013e  e044              B        |L1.458|
;;;688                break;
;;;689    
;;;690              case USB_REQUEST_GET_DESCRIPTOR:
;;;691                if (!USBD_ReqGetDescriptor()) {
000140  f7fffffe          BL       USBD_ReqGetDescriptor
                  |L1.324|
000144  b1d8              CBZ      r0,|L1.382|
000146  e7dd              B        |L1.260|
000148  f0100f1f          TST      r0,#0x1f
00014c  d131              BNE      |L1.434|
00014e  4842              LDR      r0,|L1.600|
000150  1c40              ADDS     r0,r0,#1
000152  e012              B        |L1.378|
;;;692                  goto stall;
;;;693                }
;;;694                USBD_DataInStage();
;;;695                break;
;;;696    
;;;697              case USB_REQUEST_SET_DESCRIPTOR:
;;;698                goto stall;
;;;699    
;;;700              case USB_REQUEST_GET_CONFIGURATION:
;;;701                if (!USBD_ReqGetConfiguration()) {
;;;702                  goto stall;
;;;703                }
;;;704                USBD_DataInStage();
;;;705                break;
;;;706    
;;;707              case USB_REQUEST_SET_CONFIGURATION:
;;;708                if (!USBD_ReqSetConfiguration()) {
000154  f7fffffe          BL       USBD_ReqSetConfiguration
000158  b188              CBZ      r0,|L1.382|
;;;709                  goto stall;
;;;710                }
;;;711                USBD_StatusInStage();
00015a  f7fffffe          BL       USBD_StatusInStage
;;;712    #ifdef __RTX
;;;713                if (__rtx) {
;;;714                  if (USBD_RTX_CoreTask) {
;;;715                    usbd_os_evt_set(USBD_EVT_SET_CFG, USBD_RTX_CoreTask);
;;;716                  }
;;;717                } else {
;;;718    #endif
;;;719                  if (USBD_P_Configure_Event) {
00015e  4843              LDR      r0,|L1.620|
000160  e014              B        |L1.396|
000162  f000001f          AND      r0,r0,#0x1f
000166  2801              CMP      r0,#1
000168  d123              BNE      |L1.434|
00016a  7868              LDRB     r0,[r5,#1]  ; USBD_Configuration
00016c  b138              CBZ      r0,|L1.382|
00016e  7938              LDRB     r0,[r7,#4]  ; USBD_SetupPacket
000170  78a9              LDRB     r1,[r5,#2]  ; USBD_NumInterfaces
000172  4288              CMP      r0,r1
000174  d21d              BCS      |L1.434|
000176  493e              LDR      r1,|L1.624|
000178  4408              ADD      r0,r0,r1
                  |L1.378|
00017a  6020              STR      r0,[r4,#0]  ; USBD_EP0Data
00017c  e7c2              B        |L1.260|
                  |L1.382|
00017e  e018              B        |L1.434|
;;;720                    USBD_P_Configure_Event();
;;;721                  }
;;;722    #ifdef __RTX
;;;723                }
;;;724    #endif
;;;725                break;
;;;726    
;;;727              case USB_REQUEST_GET_INTERFACE:
;;;728                if (!USBD_ReqGetInterface()) {
;;;729                  goto stall;
;;;730                }
;;;731                USBD_DataInStage();
;;;732                break;
;;;733    
;;;734              case USB_REQUEST_SET_INTERFACE:
;;;735                if (!USBD_ReqSetInterface()) {
000180  f7fffffe          BL       USBD_ReqSetInterface
000184  b1a8              CBZ      r0,|L1.434|
;;;736                  goto stall;
;;;737                }
;;;738                USBD_StatusInStage();
000186  f7fffffe          BL       USBD_StatusInStage
;;;739    #ifdef __RTX
;;;740                if (__rtx) {
;;;741                  if (USBD_RTX_CoreTask) {
;;;742                    usbd_os_evt_set(USBD_EVT_SET_IF, USBD_RTX_CoreTask);
;;;743                  }
;;;744                } else {
;;;745    #endif
;;;746                  if (USBD_P_Interface_Event) {
00018a  483a              LDR      r0,|L1.628|
                  |L1.396|
00018c  6801              LDR      r1,[r0,#0]  ; USBD_P_Interface_Event
00018e  b1e1              CBZ      r1,|L1.458|
;;;747                    USBD_P_Interface_Event();
000190  4608              MOV      r0,r1
000192  4780              BLX      r0
000194  e019              B        |L1.458|
                  |L1.406|
;;;748                  }
;;;749    #ifdef __RTX
;;;750                }
;;;751    #endif
;;;752                break;
;;;753    
;;;754              default:
;;;755                goto stall;
;;;756            }
;;;757            break;  /* end case REQUEST_STANDARD */
;;;758    
;;;759          case REQUEST_CLASS:
;;;760            switch (USBD_SetupPacket.bmRequestType.Recipient) {
000196  f010001f          ANDS     r0,r0,#0x1f
00019a  d00a              BEQ      |L1.434|
00019c  2801              CMP      r0,#1
00019e  d108              BNE      |L1.434|
;;;761    
;;;762              case REQUEST_TO_DEVICE:
;;;763                goto stall;                                                  /* not supported */
;;;764    
;;;765              case REQUEST_TO_INTERFACE:
;;;766                if (USBD_EndPoint0_Setup_HID_ReqToIF())
0001a0  f7fffffe          BL       USBD_EndPoint0_Setup_HID_ReqToIF
0001a4  b988              CBNZ     r0,|L1.458|
;;;767                  goto setup_class_ok;
;;;768                if (USBD_EndPoint0_Setup_MSC_ReqToIF())
0001a6  f7fffffe          BL       USBD_EndPoint0_Setup_MSC_ReqToIF
0001aa  b970              CBNZ     r0,|L1.458|
;;;769                  goto setup_class_ok;
;;;770                if (USBD_EndPoint0_Setup_CDC_ReqToIF())
0001ac  f7fffffe          BL       USBD_EndPoint0_Setup_CDC_ReqToIF
0001b0  b958              CBNZ     r0,|L1.458|
                  |L1.434|
;;;771                  goto setup_class_ok;
;;;772                goto stall;                                                  /* not supported */
;;;773                /* end case REQUEST_TO_INTERFACE */
;;;774    
;;;775              case REQUEST_TO_ENDPOINT:
;;;776                goto stall;
;;;777                /* end case REQUEST_TO_ENDPOINT */
;;;778    
;;;779              default:
;;;780                goto stall;
;;;781            }
;;;782    setup_class_ok:                                                          /* request finished successfully */
;;;783            break;  /* end case REQUEST_CLASS */
;;;784    
;;;785          default:
;;;786    stall:  if ((USBD_SetupPacket.bmRequestType.Dir == REQUEST_HOST_TO_DEVICE) &&
0001b2  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
0001b4  0600              LSLS     r0,r0,#24
0001b6  d403              BMI      |L1.448|
;;;787                (USBD_SetupPacket.wLength != 0)) {
0001b8  88f8              LDRH     r0,[r7,#6]  ; USBD_SetupPacket
0001ba  b108              CBZ      r0,|L1.448|
;;;788              USBD_SetStallEP(0x00);
0001bc  2000              MOVS     r0,#0
0001be  e000              B        |L1.450|
                  |L1.448|
;;;789            } else {
;;;790              USBD_SetStallEP(0x80);
0001c0  2080              MOVS     r0,#0x80
                  |L1.450|
0001c2  f7fffffe          BL       USBD_SetStallEP
;;;791            }
;;;792            USBD_EP0Data.Count = 0;
0001c6  f8a49004          STRH     r9,[r4,#4]
                  |L1.458|
;;;793            break;
;;;794        }
;;;795      }
;;;796    
;;;797      if (event & USBD_EVT_OUT) {
0001ca  0770              LSLS     r0,r6,#29
0001cc  d521              BPL      |L1.530|
;;;798        if (USBD_SetupPacket.bmRequestType.Dir == REQUEST_HOST_TO_DEVICE) {
0001ce  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
0001d0  0600              LSLS     r0,r0,#24
0001d2  d41c              BMI      |L1.526|
;;;799          if (USBD_EP0Data.Count) {                                          /* still data to receive ? */
0001d4  88a0              LDRH     r0,[r4,#4]  ; USBD_EP0Data
0001d6  b1e0              CBZ      r0,|L1.530|
;;;800            USBD_DataOutStage();                                             /* receive data */
0001d8  f7fffffe          BL       USBD_DataOutStage
;;;801            if (USBD_EP0Data.Count == 0) {                                   /* data complete ? */
0001dc  88a0              LDRH     r0,[r4,#4]  ; USBD_EP0Data
0001de  b9c0              CBNZ     r0,|L1.530|
;;;802              switch (USBD_SetupPacket.bmRequestType.Type) {
0001e0  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
0001e2  f3c01141          UBFX     r1,r0,#5,#2
0001e6  b161              CBZ      r1,|L1.514|
0001e8  2901              CMP      r1,#1
0001ea  d10a              BNE      |L1.514|
;;;803    
;;;804                case REQUEST_STANDARD:
;;;805                  goto stall_i;                                              /* not supported */
;;;806    
;;;807                case REQUEST_CLASS:
;;;808                  switch (USBD_SetupPacket.bmRequestType.Recipient) {
0001ec  f010001f          ANDS     r0,r0,#0x1f
0001f0  d007              BEQ      |L1.514|
0001f2  2801              CMP      r0,#1
0001f4  d105              BNE      |L1.514|
;;;809                    case REQUEST_TO_DEVICE:
;;;810                      goto stall_i;                                          /* not supported */
;;;811    
;;;812                    case REQUEST_TO_INTERFACE:
;;;813                      if (USBD_EndPoint0_Out_HID_ReqToIF())
0001f6  f7fffffe          BL       USBD_EndPoint0_Out_HID_ReqToIF
0001fa  b950              CBNZ     r0,|L1.530|
;;;814                        goto out_class_ok;
;;;815                      if (USBD_EndPoint0_Out_CDC_ReqToIF())
0001fc  f7fffffe          BL       USBD_EndPoint0_Out_CDC_ReqToIF
000200  b938              CBNZ     r0,|L1.530|
                  |L1.514|
;;;816                        goto out_class_ok;
;;;817                      goto stall_i;
;;;818                      /* end case REQUEST_TO_INTERFACE */
;;;819    
;;;820                    case REQUEST_TO_ENDPOINT:
;;;821                      goto stall_i;
;;;822                      /* end case REQUEST_TO_ENDPOINT */
;;;823    
;;;824                    default:
;;;825                      goto stall_i;
;;;826                  }
;;;827    out_class_ok:                                                            /* request finished successfully */
;;;828                  break; /* end case REQUEST_CLASS */
;;;829    
;;;830                default:
;;;831    stall_i:      USBD_SetStallEP(0x80);
000202  2080              MOVS     r0,#0x80
000204  f7fffffe          BL       USBD_SetStallEP
;;;832                  USBD_EP0Data.Count = 0;
000208  f8a49004          STRH     r9,[r4,#4]
;;;833                  break;
00020c  e001              B        |L1.530|
                  |L1.526|
;;;834              }
;;;835            }
;;;836          }
;;;837        } else {
;;;838          USBD_StatusOutStage();                                             /* receive Acknowledge */
00020e  f7fffffe          BL       USBD_StatusOutStage
                  |L1.530|
;;;839        }
;;;840      }  /* end USBD_EVT_OUT */
;;;841    
;;;842      if (event & USBD_EVT_IN) {
000212  0730              LSLS     r0,r6,#28
000214  d512              BPL      |L1.572|
;;;843        if (USBD_SetupPacket.bmRequestType.Dir == REQUEST_DEVICE_TO_HOST) {
000216  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
000218  0600              LSLS     r0,r0,#24
00021a  d506              BPL      |L1.554|
;;;844          if (USBD_EP0Data.Count || USBD_ZLP) USBD_DataInStage();            /* send data */
00021c  88a0              LDRH     r0,[r4,#4]  ; USBD_EP0Data
00021e  7929              LDRB     r1,[r5,#4]  ; USBD_ZLP
000220  4308              ORRS     r0,r0,r1
000222  d00b              BEQ      |L1.572|
000224  f7fffffe          BL       USBD_DataInStage
000228  e008              B        |L1.572|
                  |L1.554|
;;;845        } else {
;;;846          if (USBD_DeviceAddress & 0x80) {
00022a  7828              LDRB     r0,[r5,#0]  ; USBD_DeviceAddress
00022c  0601              LSLS     r1,r0,#24
00022e  d505              BPL      |L1.572|
;;;847            USBD_DeviceAddress &= 0x7F;
000230  f000007f          AND      r0,r0,#0x7f
000234  7028              STRB     r0,[r5,#0]
;;;848            USBD_SetAddress(USBD_DeviceAddress, 0);
000236  2100              MOVS     r1,#0
000238  f7fffffe          BL       USBD_SetAddress
                  |L1.572|
;;;849          }
;;;850        }
;;;851      }  /* end USBD_EVT_IN */
;;;852    
;;;853      if (event & USBD_EVT_OUT_STALL) {
00023c  0670              LSLS     r0,r6,#25
00023e  d502              BPL      |L1.582|
;;;854        USBD_ClrStallEP(0x00);
000240  2000              MOVS     r0,#0
000242  f7fffffe          BL       USBD_ClrStallEP
                  |L1.582|
;;;855      }
;;;856    
;;;857      if (event & USBD_EVT_IN_STALL) {
000246  0630              LSLS     r0,r6,#24
000248  d504              BPL      |L1.596|
;;;858        USBD_ClrStallEP(0x80);
00024a  e8bd47f0          POP      {r4-r10,lr}
00024e  2080              MOVS     r0,#0x80
000250  f7ffbffe          B.W      USBD_ClrStallEP
                  |L1.596|
;;;859      }
;;;860    }
000254  e8bd87f0          POP      {r4-r10,pc}
;;;861    
                          ENDP

                  |L1.600|
                          DCD      ||.data||
                  |L1.604|
                          DCD      usbd_power
                  |L1.608|
                          DCD      usbd_max_packet0
                  |L1.612|
                          DCD      USBD_EP0Buf
                  |L1.616|
                          DCD      USBD_P_Feature_Event
                  |L1.620|
                          DCD      USBD_P_Configure_Event
                  |L1.624|
                          DCD      USBD_AltSetting
                  |L1.628|
                          DCD      USBD_P_Interface_Event

                          AREA ||.data||, DATA, ALIGN=2

                  USBD_DeviceAddress
000000  00                DCB      0x00
                  USBD_Configuration
000001  00                DCB      0x00
                  USBD_NumInterfaces
000002  00                DCB      0x00
                  USBD_HighSpeed
000003  00                DCB      0x00
                  USBD_ZLP
000004  0000              DCB      0x00,0x00
                  USBD_DeviceStatus
000006  0000              DCB      0x00,0x00
                  USBD_EndPointMask
                          DCD      0x00000000
                  USBD_EndPointHalt
                          DCD      0x00000000
                  USBD_EndPointStall
                          DCD      0x00000000
                  USBD_EP0Data
                          %        8
                  USBD_SetupPacket
                          %        8

                          AREA ||i.USBD_ReqSetClrFeature||, COMGROUP=USBD_ReqSetClrFeature, CODE, READONLY, ALIGN=2

                  USBD_ReqSetClrFeature PROC
;;;225    
;;;226    __inline BOOL USBD_ReqSetClrFeature (U32 sc) {
000000  b570              PUSH     {r4-r6,lr}
;;;227      U32 n, m;
;;;228    
;;;229      switch (USBD_SetupPacket.bmRequestType.Recipient) {
000002  4a26              LDR      r2,|L16.156|
000004  4601              MOV      r1,r0                 ;226
;;;230        case REQUEST_TO_DEVICE:
;;;231          if (USBD_SetupPacket.wValue == USB_FEATURE_REMOTE_WAKEUP) {
;;;232            if (sc) {
;;;233              USBD_WakeUpCfg(__TRUE);
;;;234              USBD_DeviceStatus |=  USB_GETSTATUS_REMOTE_WAKEUP;
000006  f1a2041c          SUB      r4,r2,#0x1c
00000a  7810              LDRB     r0,[r2,#0]            ;229  ; USBD_SetupPacket
00000c  f010031f          ANDS     r3,r0,#0x1f           ;229
000010  4610              MOV      r0,r2                 ;229
000012  8840              LDRH     r0,[r0,#2]            ;231
000014  d004              BEQ      |L16.32|
000016  2b01              CMP      r3,#1                 ;229
000018  d028              BEQ      |L16.108|
00001a  2b02              CMP      r3,#2                 ;229
00001c  d126              BNE      |L16.108|
00001e  e010              B        |L16.66|
                  |L16.32|
000020  2801              CMP      r0,#1                 ;231
000022  d123              BNE      |L16.108|
000024  b129              CBZ      r1,|L16.50|
000026  f7fffffe          BL       USBD_WakeUpCfg
00002a  88e0              LDRH     r0,[r4,#6]  ; USBD_DeviceStatus
00002c  f0400002          ORR      r0,r0,#2
000030  e005              B        |L16.62|
                  |L16.50|
;;;235            } else {
;;;236              USBD_WakeUpCfg(__FALSE);
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       USBD_WakeUpCfg
;;;237              USBD_DeviceStatus &= ~USB_GETSTATUS_REMOTE_WAKEUP;
000038  88e0              LDRH     r0,[r4,#6]  ; USBD_DeviceStatus
00003a  f0200002          BIC      r0,r0,#2
                  |L16.62|
00003e  80e0              STRH     r0,[r4,#6]
000040  e029              B        |L16.150|
                  |L16.66|
;;;238            }
;;;239          } else {
;;;240            return (__FALSE);
;;;241          }
;;;242          break;
;;;243        case REQUEST_TO_INTERFACE:
;;;244          return (__FALSE);
;;;245        case REQUEST_TO_ENDPOINT:
;;;246          n = USBD_SetupPacket.wIndexL & 0x8F;
000042  7912              LDRB     r2,[r2,#4]  ; USBD_SetupPacket
000044  f002068f          AND      r6,r2,#0x8f
;;;247          m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
000048  0632              LSLS     r2,r6,#24
00004a  d505              BPL      |L16.88|
00004c  f006020f          AND      r2,r6,#0xf
000050  f44f3580          MOV      r5,#0x10000
000054  4095              LSLS     r5,r5,r2
000056  e001              B        |L16.92|
                  |L16.88|
000058  2501              MOVS     r5,#1
00005a  40b5              LSLS     r5,r5,r6
                  |L16.92|
;;;248          if ((USBD_Configuration != 0) && ((n & 0x0F) != 0) && (USBD_EndPointMask & m)) {
00005c  7862              LDRB     r2,[r4,#1]  ; USBD_Configuration
00005e  b12a              CBZ      r2,|L16.108|
000060  0732              LSLS     r2,r6,#28
000062  d003              BEQ      |L16.108|
000064  68a2              LDR      r2,[r4,#8]  ; USBD_EndPointMask
000066  422a              TST      r2,r5
000068  d000              BEQ      |L16.108|
;;;249            if (USBD_SetupPacket.wValue == USB_FEATURE_ENDPOINT_STALL) {
00006a  b108              CBZ      r0,|L16.112|
                  |L16.108|
;;;250              if (sc) {
;;;251                USBD_SetStallEP(n);
;;;252                USBD_EndPointHalt |=  m;
;;;253              } else {
;;;254                if ((USBD_EndPointStall & m) != 0) {
;;;255                  return (__TRUE);
;;;256                }
;;;257                USBD_ClrStallEP(n);
;;;258                USBD_ReqClrFeature_MSC (n);
;;;259                USBD_EndPointHalt &= ~m;
;;;260              }
;;;261            } else {
;;;262              return (__FALSE);
;;;263            }
;;;264          } else {
;;;265            return (__FALSE);
;;;266          }
;;;267          break;
;;;268        default:
;;;269          return (__FALSE);
00006c  2000              MOVS     r0,#0
;;;270      }
;;;271      return (__TRUE);
;;;272    }
00006e  bd70              POP      {r4-r6,pc}
                  |L16.112|
000070  b129              CBZ      r1,|L16.126|
000072  4630              MOV      r0,r6                 ;251
000074  f7fffffe          BL       USBD_SetStallEP
000078  68e0              LDR      r0,[r4,#0xc]          ;252  ; USBD_EndPointHalt
00007a  4328              ORRS     r0,r0,r5              ;252
00007c  e00a              B        |L16.148|
                  |L16.126|
00007e  6920              LDR      r0,[r4,#0x10]         ;254  ; USBD_EndPointStall
000080  4228              TST      r0,r5                 ;254
000082  d108              BNE      |L16.150|
000084  4630              MOV      r0,r6                 ;257
000086  f7fffffe          BL       USBD_ClrStallEP
00008a  4630              MOV      r0,r6                 ;258
00008c  f7fffffe          BL       USBD_ReqClrFeature_MSC
000090  68e0              LDR      r0,[r4,#0xc]          ;259  ; USBD_EndPointHalt
000092  43a8              BICS     r0,r0,r5              ;259
                  |L16.148|
000094  60e0              STR      r0,[r4,#0xc]          ;252  ; USBD_EndPointHalt
                  |L16.150|
000096  2001              MOVS     r0,#1                 ;271
000098  bd70              POP      {r4-r6,pc}
;;;273    
                          ENDP

00009a  0000              DCW      0x0000
                  |L16.156|
                          DCD      ||.data||+0x1c

                          AREA ||i.USBD_ReqGetDescriptor||, COMGROUP=USBD_ReqGetDescriptor, CODE, READONLY, ALIGN=2

                  USBD_ReqGetDescriptor PROC
;;;299    
;;;300    __inline BOOL USBD_ReqGetDescriptor (void) {
000000  b57c              PUSH     {r2-r6,lr}
;;;301      U8  *pD;
;;;302      U32  len, n;
;;;303    
;;;304      switch (USBD_SetupPacket.bmRequestType.Recipient) {
000002  4841              LDR      r0,|L23.264|
;;;305        case REQUEST_TO_DEVICE:
;;;306          switch (USBD_SetupPacket.wValueH) {
;;;307            case USB_DEVICE_DESCRIPTOR_TYPE:
;;;308              USBD_EP0Data.pData = (U8 *)USBD_DeviceDescriptor;
;;;309              len = USB_DEVICE_DESC_SIZE;
;;;310              break;
;;;311            case USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE:
;;;312              if (!usbd_hs_enable) {
;;;313                return (__FALSE);  /* High speed not enabled */
;;;314              }
;;;315              if (USBD_HighSpeed == __FALSE) {
000004  f1a0051c          SUB      r5,r0,#0x1c
000008  7801              LDRB     r1,[r0,#0]            ;304  ; USBD_SetupPacket
00000a  f1a00408          SUB      r4,r0,#8              ;308
00000e  f011011f          ANDS     r1,r1,#0x1f           ;304
000012  d002              BEQ      |L23.26|
000014  2901              CMP      r1,#1                 ;304
000016  d170              BNE      |L23.250|
000018  e05c              B        |L23.212|
                  |L23.26|
00001a  78c6              LDRB     r6,[r0,#3]            ;306  ; USBD_SetupPacket
00001c  483a              LDR      r0,|L23.264|
00001e  493a              LDR      r1,|L23.264|
000020  381c              SUBS     r0,r0,#0x1c
000022  4a3a              LDR      r2,|L23.268|
000024  78c0              LDRB     r0,[r0,#3]
;;;316                USBD_EP0Data.pData = (U8 *)USBD_DeviceQualifier;
;;;317              } else {
;;;318                USBD_EP0Data.pData = (U8 *)USBD_DeviceQualifier_HS;
;;;319              }
;;;320              len = USB_DEVICE_QUALI_SIZE;
;;;321              break;
;;;322            case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;323              if ((!usbd_hs_enable) && (USBD_HighSpeed == __TRUE)) {
;;;324                return (__FALSE);  /* High speed request but high-speed not enabled */
;;;325              }
;;;326              if (USBD_HighSpeed == __FALSE) {
;;;327                pD = (U8 *)USBD_ConfigDescriptor;
;;;328              } else {
;;;329                pD = (U8 *)USBD_ConfigDescriptor_HS;
;;;330              }
;;;331              for (n = 0; n != USBD_SetupPacket.wValueL; n++) {
000026  7889              LDRB     r1,[r1,#2]
000028  2e08              CMP      r6,#8                 ;306
00002a  d266              BCS      |L23.250|
00002c  e8dff006          TBB      [pc,r6]               ;306
000030  6504123f          DCB      0x65,0x04,0x12,0x3f
000034  6565082c          DCB      0x65,0x65,0x08,0x2c
000038  4835              LDR      r0,|L23.272|
00003a  6020              STR      r0,[r4,#0]            ;309  ; USBD_EP0Data
00003c  2012              MOVS     r0,#0x12              ;309
00003e  e047              B        |L23.208|
000040  7811              LDRB     r1,[r2,#0]            ;312  ; usbd_hs_enable
000042  2900              CMP      r1,#0                 ;312
000044  d059              BEQ      |L23.250|
000046  b118              CBZ      r0,|L23.80|
000048  4832              LDR      r0,|L23.276|
                  |L23.74|
00004a  6020              STR      r0,[r4,#0]            ;320  ; USBD_EP0Data
00004c  200a              MOVS     r0,#0xa               ;320
00004e  e03f              B        |L23.208|
                  |L23.80|
000050  4831              LDR      r0,|L23.280|
000052  e7fa              B        |L23.74|
000054  7812              LDRB     r2,[r2,#0]            ;323  ; usbd_hs_enable
000056  b90a              CBNZ     r2,|L23.92|
000058  2801              CMP      r0,#1                 ;323
00005a  d04e              BEQ      |L23.250|
                  |L23.92|
00005c  b118              CBZ      r0,|L23.102|
00005e  482f              LDR      r0,|L23.284|
                  |L23.96|
000060  9000              STR      r0,[sp,#0]
000062  2000              MOVS     r0,#0
000064  e008              B        |L23.120|
                  |L23.102|
000066  482e              LDR      r0,|L23.288|
000068  e7fa              B        |L23.96|
                  |L23.106|
;;;332                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0) {
00006a  9a00              LDR      r2,[sp,#0]
00006c  7813              LDRB     r3,[r2,#0]
00006e  b113              CBZ      r3,|L23.118|
;;;333                  pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
000070  8853              LDRH     r3,[r2,#2]
000072  441a              ADD      r2,r2,r3
000074  9200              STR      r2,[sp,#0]
                  |L23.118|
000076  1c40              ADDS     r0,r0,#1              ;331
                  |L23.120|
000078  4281              CMP      r1,r0                 ;331
00007a  d1f6              BNE      |L23.106|
                  |L23.124|
;;;334                }
;;;335              }
;;;336              if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength == 0) {
00007c  9800              LDR      r0,[sp,#0]
00007e  7801              LDRB     r1,[r0,#0]
000080  b3d1              CBZ      r1,|L23.248|
;;;337                return (__FALSE);
;;;338              }
;;;339              USBD_EP0Data.pData = pD;
;;;340              len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
000082  6020              STR      r0,[r4,#0]  ; USBD_EP0Data
000084  8840              LDRH     r0,[r0,#2]
;;;341              break;
000086  e023              B        |L23.208|
;;;342            case USB_OTHER_SPEED_CONFIG_DESCRIPTOR_TYPE:
;;;343              if (!usbd_hs_enable) {
000088  7812              LDRB     r2,[r2,#0]  ; usbd_hs_enable
00008a  b3aa              CBZ      r2,|L23.248|
;;;344                return (__FALSE);  /* High speed not enabled */
;;;345              }
;;;346              if (USBD_HighSpeed == __FALSE) {
00008c  b118              CBZ      r0,|L23.150|
;;;347                pD = (U8 *)USBD_OtherSpeedConfigDescriptor;
;;;348              } else {
;;;349                pD = (U8 *)USBD_OtherSpeedConfigDescriptor_HS;
00008e  4825              LDR      r0,|L23.292|
                  |L23.144|
;;;350              }
;;;351              for (n = 0; n != USBD_SetupPacket.wValueL; n++) {
000090  9000              STR      r0,[sp,#0]
000092  2000              MOVS     r0,#0
000094  e008              B        |L23.168|
                  |L23.150|
000096  4824              LDR      r0,|L23.296|
000098  e7fa              B        |L23.144|
                  |L23.154|
;;;352                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0) {
00009a  9a00              LDR      r2,[sp,#0]
00009c  7813              LDRB     r3,[r2,#0]
00009e  b113              CBZ      r3,|L23.166|
;;;353                  pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
0000a0  8853              LDRH     r3,[r2,#2]
0000a2  441a              ADD      r2,r2,r3
0000a4  9200              STR      r2,[sp,#0]
                  |L23.166|
0000a6  1c40              ADDS     r0,r0,#1              ;351
                  |L23.168|
0000a8  4281              CMP      r1,r0                 ;351
0000aa  d1f6              BNE      |L23.154|
0000ac  e7e6              B        |L23.124|
;;;354                }
;;;355              }
;;;356              if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength == 0) {
;;;357                return (__FALSE);
;;;358              }
;;;359              USBD_EP0Data.pData = pD;
;;;360              len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
;;;361              break;
;;;362            case USB_STRING_DESCRIPTOR_TYPE:
;;;363              pD = (U8 *)USBD_StringDescriptor;
0000ae  481f              LDR      r0,|L23.300|
;;;364    
;;;365                // added by sam to send unique id string descriptor
;;;366    //        if (USBD_SetupPacket.wValueL == 3) {
;;;367    //             USBD_EP0Data.pData = get_uid_string_interface();
;;;368    //             len = get_len_string_interface();
;;;369    //              break;
;;;370    //          }
;;;371    
;;;372              for (n = 0; n != USBD_SetupPacket.wValueL; n++) {
0000b0  9000              STR      r0,[sp,#0]
0000b2  2000              MOVS     r0,#0
0000b4  e005              B        |L23.194|
                  |L23.182|
;;;373                if (((USB_STRING_DESCRIPTOR *)pD)->bLength != 0) {
0000b6  9a00              LDR      r2,[sp,#0]
0000b8  7813              LDRB     r3,[r2,#0]
0000ba  b10b              CBZ      r3,|L23.192|
;;;374                  pD += ((USB_STRING_DESCRIPTOR *)pD)->bLength;
0000bc  441a              ADD      r2,r2,r3
0000be  9200              STR      r2,[sp,#0]
                  |L23.192|
0000c0  1c40              ADDS     r0,r0,#1              ;372
                  |L23.194|
0000c2  4281              CMP      r1,r0                 ;372
0000c4  d1f7              BNE      |L23.182|
;;;375                }
;;;376              }
;;;377              if (((USB_STRING_DESCRIPTOR *)pD)->bLength == 0) {
0000c6  9800              LDR      r0,[sp,#0]
0000c8  7801              LDRB     r1,[r0,#0]
0000ca  b1a9              CBZ      r1,|L23.248|
;;;378                return (__FALSE);
;;;379              }
;;;380              USBD_EP0Data.pData = pD;
;;;381              len = ((USB_STRING_DESCRIPTOR *)pD)->bLength;
0000cc  6020              STR      r0,[r4,#0]  ; USBD_EP0Data
0000ce  7800              LDRB     r0,[r0,#0]
                  |L23.208|
0000d0  9001              STR      r0,[sp,#4]
0000d2  e005              B        |L23.224|
                  |L23.212|
;;;382              break;
;;;383            default:
;;;384              return (__FALSE);
;;;385          }
;;;386          break;
;;;387        case REQUEST_TO_INTERFACE:
;;;388          if (!USBD_ReqGetDescriptor_HID(&pD, &len))
0000d4  a901              ADD      r1,sp,#4
0000d6  4668              MOV      r0,sp
0000d8  f7fffffe          BL       USBD_ReqGetDescriptor_HID
0000dc  2800              CMP      r0,#0
0000de  d00d              BEQ      |L23.252|
                  |L23.224|
;;;389            return (__FALSE);
;;;390          break;
;;;391        default:
;;;392          return (__FALSE);
;;;393      }
;;;394    
;;;395      if (USBD_EP0Data.Count > len) {
0000e0  88a1              LDRH     r1,[r4,#4]  ; USBD_EP0Data
0000e2  9801              LDR      r0,[sp,#4]
0000e4  4281              CMP      r1,r0
0000e6  d90c              BLS      |L23.258|
;;;396        USBD_EP0Data.Count = len;
;;;397        if (!(USBD_EP0Data.Count & (usbd_max_packet0 - 1))) USBD_ZLP = 1;
0000e8  4911              LDR      r1,|L23.304|
0000ea  b280              UXTH     r0,r0                 ;396
0000ec  80a0              STRH     r0,[r4,#4]            ;396
0000ee  7809              LDRB     r1,[r1,#0]  ; usbd_max_packet0
0000f0  1e49              SUBS     r1,r1,#1
0000f2  4208              TST      r0,r1
0000f4  d003              BEQ      |L23.254|
0000f6  e004              B        |L23.258|
                  |L23.248|
0000f8  e7ff              B        |L23.250|
                  |L23.250|
0000fa  2000              MOVS     r0,#0                 ;392
                  |L23.252|
;;;398      }
;;;399    
;;;400      return (__TRUE);
;;;401    }
0000fc  bd7c              POP      {r2-r6,pc}
                  |L23.254|
0000fe  2001              MOVS     r0,#1                 ;397
000100  7128              STRB     r0,[r5,#4]            ;397
                  |L23.258|
000102  2001              MOVS     r0,#1                 ;400
000104  bd7c              POP      {r2-r6,pc}
;;;402    
                          ENDP

000106  0000              DCW      0x0000
                  |L23.264|
                          DCD      ||.data||+0x1c
                  |L23.268|
                          DCD      usbd_hs_enable
                  |L23.272|
                          DCD      USBD_DeviceDescriptor
                  |L23.276|
                          DCD      USBD_DeviceQualifier_HS
                  |L23.280|
                          DCD      USBD_DeviceQualifier
                  |L23.284|
                          DCD      USBD_ConfigDescriptor_HS
                  |L23.288|
                          DCD      USBD_ConfigDescriptor
                  |L23.292|
                          DCD      USBD_OtherSpeedConfigDescriptor_HS
                  |L23.296|
                          DCD      USBD_OtherSpeedConfigDescriptor
                  |L23.300|
                          DCD      USBD_StringDescriptor
                  |L23.304|
                          DCD      usbd_max_packet0

                          AREA ||i.USBD_ReqSetConfiguration||, COMGROUP=USBD_ReqSetConfiguration, CODE, READONLY, ALIGN=2

                  USBD_ReqSetConfiguration PROC
;;;428    
;;;429    __inline BOOL USBD_ReqSetConfiguration (void) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;430      USB_CONFIGURATION_DESCRIPTOR *pD;
;;;431      U32                           alt = 0;
;;;432      U32                           n, m;
;;;433    
;;;434      switch (USBD_SetupPacket.bmRequestType.Recipient) {
000004  4f5c              LDR      r7,|L30.376|
000006  2000              MOVS     r0,#0                 ;431
000008  9000              STR      r0,[sp,#0]
00000a  7838              LDRB     r0,[r7,#0]  ; USBD_SetupPacket
00000c  f0100f1f          TST      r0,#0x1f
000010  d16f              BNE      |L30.242|
;;;435        case REQUEST_TO_DEVICE:
;;;436    
;;;437          if (USBD_SetupPacket.wValueL) {
000012  78b8              LDRB     r0,[r7,#2]  ; USBD_SetupPacket
000014  f04f0900          MOV      r9,#0
;;;438            if ((!usbd_hs_enable) && (USBD_HighSpeed == __TRUE)) {
000018  f04f0b01          MOV      r11,#1
;;;439              return (__FALSE);  /* High speed request but high-speed not enabled */
;;;440            }
;;;441            if (USBD_HighSpeed == __FALSE) {
;;;442              pD = (USB_CONFIGURATION_DESCRIPTOR *)USBD_ConfigDescriptor;
;;;443            } else {
;;;444              pD = (USB_CONFIGURATION_DESCRIPTOR *)USBD_ConfigDescriptor_HS;
;;;445            }
;;;446            while (pD->bLength) {
;;;447              switch (pD->bDescriptorType) {
;;;448                case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;449                  if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue == USBD_SetupPacket.wValueL) {
;;;450                    USBD_Configuration = USBD_SetupPacket.wValueL;
;;;451                    USBD_NumInterfaces = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bNumInterfaces;
;;;452                    for (n = 0; n < usbd_if_num; n++) {
;;;453                      USBD_AltSetting[n] = 0;
;;;454                    }
;;;455                    for (n = 1; n < 16; n++) {
;;;456                      if (USBD_EndPointMask & (1 << n)) {
;;;457                        USBD_DisableEP(n);
;;;458                      }
;;;459                      if (USBD_EndPointMask & ((1 << 16) << n)) {
00001c  f44f3a80          MOV      r10,#0x10000
000020  f1a7061c          SUB      r6,r7,#0x1c           ;438
000024  2800              CMP      r0,#0                 ;437
000026  d07a              BEQ      |L30.286|
000028  4854              LDR      r0,|L30.380|
00002a  7801              LDRB     r1,[r0,#0]            ;438  ; usbd_hs_enable
00002c  4630              MOV      r0,r6                 ;438
00002e  78c0              LDRB     r0,[r0,#3]            ;438
000030  b909              CBNZ     r1,|L30.54|
000032  2801              CMP      r0,#1                 ;438
000034  d05d              BEQ      |L30.242|
                  |L30.54|
000036  b108              CBZ      r0,|L30.60|
000038  4c51              LDR      r4,|L30.384|
00003a  e06b              B        |L30.276|
                  |L30.60|
00003c  4c51              LDR      r4,|L30.388|
00003e  e069              B        |L30.276|
                  |L30.64|
000040  7860              LDRB     r0,[r4,#1]            ;447
000042  2802              CMP      r0,#2                 ;447
000044  d004              BEQ      |L30.80|
000046  2804              CMP      r0,#4                 ;447
000048  d044              BEQ      |L30.212|
00004a  2805              CMP      r0,#5                 ;447
00004c  d160              BNE      |L30.272|
00004e  e044              B        |L30.218|
                  |L30.80|
000050  7961              LDRB     r1,[r4,#5]            ;449
000052  78b8              LDRB     r0,[r7,#2]            ;449  ; USBD_SetupPacket
000054  4281              CMP      r1,r0                 ;449
000056  d13b              BNE      |L30.208|
000058  7070              STRB     r0,[r6,#1]            ;450
00005a  7920              LDRB     r0,[r4,#4]            ;451
00005c  70b0              STRB     r0,[r6,#2]            ;451
00005e  2000              MOVS     r0,#0                 ;452
000060  4a49              LDR      r2,|L30.392|
000062  494a              LDR      r1,|L30.396|
000064  e003              B        |L30.110|
000066  bf00              NOP                            ;453
                  |L30.104|
000068  f8029000          STRB     r9,[r2,r0]            ;453
00006c  1c40              ADDS     r0,r0,#1              ;452
                  |L30.110|
00006e  880b              LDRH     r3,[r1,#0]            ;452  ; usbd_if_num
000070  4298              CMP      r0,r3                 ;452
000072  d3f9              BCC      |L30.104|
000074  2501              MOVS     r5,#1                 ;455
000076  46b0              MOV      r8,r6                 ;438
                  |L30.120|
000078  fa0bf005          LSL      r0,r11,r5             ;456
00007c  f8d81008          LDR      r1,[r8,#8]            ;456  ; USBD_EndPointMask
000080  4208              TST      r0,r1                 ;456
000082  d002              BEQ      |L30.138|
000084  4628              MOV      r0,r5                 ;457
000086  f7fffffe          BL       USBD_DisableEP
                  |L30.138|
00008a  f8d81008          LDR      r1,[r8,#8]  ; USBD_EndPointMask
00008e  fa0af005          LSL      r0,r10,r5
000092  4208              TST      r0,r1
000094  d003              BEQ      |L30.158|
;;;460                        USBD_DisableEP(n | 0x80);
000096  f0450080          ORR      r0,r5,#0x80
00009a  f7fffffe          BL       USBD_DisableEP
                  |L30.158|
00009e  1c6d              ADDS     r5,r5,#1              ;455
0000a0  2d10              CMP      r5,#0x10              ;455
0000a2  d3e9              BCC      |L30.120|
;;;461                      }
;;;462                    }
;;;463                    USBD_EndPointMask = 0x00010001;
0000a4  f04f1001          MOV      r0,#0x10001
;;;464                    USBD_EndPointHalt = 0x00000000;
;;;465                    USBD_EndPointStall= 0x00000000;
0000a8  e9c80902          STRD     r0,r9,[r8,#8]
;;;466                    USBD_Configure(__TRUE);
0000ac  2001              MOVS     r0,#1
0000ae  f8c89010          STR      r9,[r8,#0x10]  ; USBD_EndPointStall
0000b2  f7fffffe          BL       USBD_Configure
;;;467                    if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bmAttributes & USB_CONFIG_POWERED_MASK) {
0000b6  79e0              LDRB     r0,[r4,#7]
0000b8  0640              LSLS     r0,r0,#25
;;;468                      USBD_DeviceStatus |=  USB_GETSTATUS_SELF_POWERED;
;;;469                    } else {
;;;470                      USBD_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
0000ba  f8b80006          LDRH     r0,[r8,#6]  ; USBD_DeviceStatus
0000be  d502              BPL      |L30.198|
0000c0  f0400001          ORR      r0,r0,#1              ;468
0000c4  e001              B        |L30.202|
                  |L30.198|
0000c6  f0200001          BIC      r0,r0,#1
                  |L30.202|
0000ca  f8a80006          STRH     r0,[r8,#6]
0000ce  e01f              B        |L30.272|
                  |L30.208|
;;;471                    }
;;;472                  } else {
;;;473                    pD = (USB_CONFIGURATION_DESCRIPTOR *)((U8 *)pD + ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength);
0000d0  8860              LDRH     r0,[r4,#2]
;;;474                    continue;
0000d2  e01e              B        |L30.274|
                  |L30.212|
;;;475                  }
;;;476                  break;
;;;477                case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;478                  alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
0000d4  78e0              LDRB     r0,[r4,#3]
;;;479                  break;
0000d6  9000              STR      r0,[sp,#0]
0000d8  e01a              B        |L30.272|
                  |L30.218|
;;;480                case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;481                  if (alt == 0) {
0000da  9800              LDR      r0,[sp,#0]
0000dc  b9c0              CBNZ     r0,|L30.272|
;;;482                    n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
0000de  78a0              LDRB     r0,[r4,#2]
0000e0  f000058f          AND      r5,r0,#0x8f
;;;483                    m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
0000e4  0628              LSLS     r0,r5,#24
0000e6  d505              BPL      |L30.244|
0000e8  f005010f          AND      r1,r5,#0xf
0000ec  fa0af001          LSL      r0,r10,r1
0000f0  e002              B        |L30.248|
                  |L30.242|
0000f2  e03c              B        |L30.366|
                  |L30.244|
0000f4  fa0bf005          LSL      r0,r11,r5
                  |L30.248|
;;;484                    USBD_EndPointMask |= m;
0000f8  68b1              LDR      r1,[r6,#8]  ; USBD_EndPointMask
0000fa  4301              ORRS     r1,r1,r0
;;;485                    USBD_ConfigEP((void *)pD);
0000fc  4620              MOV      r0,r4
0000fe  60b1              STR      r1,[r6,#8]  ; USBD_EndPointMask
000100  f7fffffe          BL       USBD_ConfigEP
;;;486                    USBD_EnableEP(n);
000104  4628              MOV      r0,r5
000106  f7fffffe          BL       USBD_EnableEP
;;;487                    USBD_ResetEP(n);
00010a  4628              MOV      r0,r5
00010c  f7fffffe          BL       USBD_ResetEP
                  |L30.272|
;;;488                  }
;;;489                  break;
;;;490              }
;;;491              pD = (USB_CONFIGURATION_DESCRIPTOR *)((U8 *)pD + pD->bLength);
000110  7820              LDRB     r0,[r4,#0]
                  |L30.274|
000112  4404              ADD      r4,r4,r0
                  |L30.276|
000114  7820              LDRB     r0,[r4,#0]            ;446
000116  2800              CMP      r0,#0                 ;446
000118  d192              BNE      |L30.64|
00011a  e024              B        |L30.358|
00011c  e7ff              B        |L30.286|
                  |L30.286|
;;;492            }
;;;493          }
;;;494          else {
;;;495            USBD_Configuration = 0;
00011e  46c8              MOV      r8,r9
000120  f8869001          STRB     r9,[r6,#1]
;;;496            for (n = 1; n < 16; n++) {
000124  2401              MOVS     r4,#1
000126  465d              MOV      r5,r11                ;438
000128  ea4f090a          MOV.W    r9,r10                ;459
                  |L30.300|
;;;497              if (USBD_EndPointMask & (1 << n)) {
00012c  68b1              LDR      r1,[r6,#8]  ; USBD_EndPointMask
00012e  fa05f004          LSL      r0,r5,r4
000132  4208              TST      r0,r1
000134  d002              BEQ      |L30.316|
;;;498                USBD_DisableEP(n);
000136  4620              MOV      r0,r4
000138  f7fffffe          BL       USBD_DisableEP
                  |L30.316|
;;;499              }
;;;500              if (USBD_EndPointMask & ((1 << 16) << n)) {
00013c  68b1              LDR      r1,[r6,#8]  ; USBD_EndPointMask
00013e  fa09f004          LSL      r0,r9,r4
000142  4208              TST      r0,r1
000144  d003              BEQ      |L30.334|
;;;501                USBD_DisableEP(n | 0x80);
000146  f0440080          ORR      r0,r4,#0x80
00014a  f7fffffe          BL       USBD_DisableEP
                  |L30.334|
00014e  1c64              ADDS     r4,r4,#1              ;496
000150  2c10              CMP      r4,#0x10              ;496
000152  d3eb              BCC      |L30.300|
;;;502              }
;;;503            }
;;;504            USBD_EndPointMask  = 0x00010001;
000154  f04f1001          MOV      r0,#0x10001
;;;505            USBD_EndPointHalt  = 0x00000000;
;;;506            USBD_EndPointStall = 0x00000000;
000158  e9c60802          STRD     r0,r8,[r6,#8]
;;;507            USBD_Configure(__FALSE);
00015c  2000              MOVS     r0,#0
00015e  f8c68010          STR      r8,[r6,#0x10]  ; USBD_EndPointStall
000162  f7fffffe          BL       USBD_Configure
                  |L30.358|
;;;508          }
;;;509    
;;;510          if (USBD_Configuration != USBD_SetupPacket.wValueL) {
000166  78b8              LDRB     r0,[r7,#2]  ; USBD_SetupPacket
000168  7871              LDRB     r1,[r6,#1]  ; USBD_Configuration
00016a  4288              CMP      r0,r1
00016c  d002              BEQ      |L30.372|
                  |L30.366|
;;;511            return (__FALSE);
;;;512          }
;;;513          break;
;;;514        default:
;;;515          return (__FALSE);
00016e  2000              MOVS     r0,#0
                  |L30.368|
;;;516      }
;;;517      return (__TRUE);
;;;518    }
000170  e8bd8ff8          POP      {r3-r11,pc}
                  |L30.372|
000174  2001              MOVS     r0,#1                 ;517
000176  e7fb              B        |L30.368|
;;;519    
                          ENDP

                  |L30.376|
                          DCD      ||.data||+0x1c
                  |L30.380|
                          DCD      usbd_hs_enable
                  |L30.384|
                          DCD      USBD_ConfigDescriptor_HS
                  |L30.388|
                          DCD      USBD_ConfigDescriptor
                  |L30.392|
                          DCD      USBD_AltSetting
                  |L30.396|
                          DCD      usbd_if_num

                          AREA ||i.USBD_ReqSetInterface||, COMGROUP=USBD_ReqSetInterface, CODE, READONLY, ALIGN=2

                  USBD_ReqSetInterface PROC
;;;549    
;;;550    __inline BOOL USBD_ReqSetInterface (void) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;551      USB_COMMON_DESCRIPTOR *pD;
;;;552      U32                    ifn = 0, alt = 0, old = 0, msk = 0;
;;;553      U32                    n, m;
;;;554      BOOL                   set;
;;;555    
;;;556      switch (USBD_SetupPacket.bmRequestType.Recipient) {
000004  4e44              LDR      r6,|L37.280|
000006  2700              MOVS     r7,#0                 ;552
000008  463d              MOV      r5,r7                 ;552
00000a  7830              LDRB     r0,[r6,#0]  ; USBD_SetupPacket
00000c  46bb              MOV      r11,r7                ;552
00000e  f000001f          AND      r0,r0,#0x1f
000012  46b8              MOV      r8,r7                 ;552
000014  2801              CMP      r0,#1
000016  d17d              BNE      |L37.276|
;;;557        case REQUEST_TO_INTERFACE:
;;;558          if (USBD_Configuration == 0) return (__FALSE);
000018  f1a6011c          SUB      r1,r6,#0x1c
00001c  7848              LDRB     r0,[r1,#1]  ; USBD_Configuration
00001e  2800              CMP      r0,#0
000020  d075              BEQ      |L37.270|
;;;559          set = __FALSE;
;;;560          if ((!usbd_hs_enable) && (USBD_HighSpeed == __TRUE)) {
000022  483e              LDR      r0,|L37.284|
000024  46ba              MOV      r10,r7                ;559
000026  7802              LDRB     r2,[r0,#0]  ; usbd_hs_enable
000028  4608              MOV      r0,r1                 ;558
00002a  78c0              LDRB     r0,[r0,#3]
00002c  b90a              CBNZ     r2,|L37.50|
00002e  2801              CMP      r0,#1
000030  d070              BEQ      |L37.276|
                  |L37.50|
;;;561            return (__FALSE);  /* High speed request but high-speed not enabled */
;;;562          }
;;;563          if (USBD_HighSpeed == __FALSE) {
000032  4689              MOV      r9,r1
000034  b108              CBZ      r0,|L37.58|
;;;564            pD = (USB_COMMON_DESCRIPTOR *)USBD_ConfigDescriptor;
;;;565          } else {
;;;566            pD = (USB_COMMON_DESCRIPTOR *)USBD_ConfigDescriptor_HS;
000036  4c3a              LDR      r4,|L37.288|
000038  e065              B        |L37.262|
                  |L37.58|
00003a  4c3a              LDR      r4,|L37.292|
00003c  e063              B        |L37.262|
                  |L37.62|
;;;567          }
;;;568          while (pD->bLength) {
;;;569            switch (pD->bDescriptorType) {
00003e  7860              LDRB     r0,[r4,#1]
000040  2802              CMP      r0,#2
000042  d004              BEQ      |L37.78|
000044  2804              CMP      r0,#4
000046  d009              BEQ      |L37.92|
000048  2805              CMP      r0,#5
00004a  d15a              BNE      |L37.258|
00004c  e017              B        |L37.126|
                  |L37.78|
;;;570              case USB_CONFIGURATION_DESCRIPTOR_TYPE:
;;;571                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue != USBD_Configuration) {
00004e  7961              LDRB     r1,[r4,#5]
000050  f8990001          LDRB     r0,[r9,#1]  ; USBD_Configuration
000054  4281              CMP      r1,r0
000056  d054              BEQ      |L37.258|
;;;572                  pD = (USB_COMMON_DESCRIPTOR *)((U8 *)pD+((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength);
000058  8860              LDRH     r0,[r4,#2]
;;;573                  continue;
00005a  e053              B        |L37.260|
                  |L37.92|
;;;574                }
;;;575                break;
;;;576              case USB_INTERFACE_DESCRIPTOR_TYPE:
;;;577                ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
00005c  78a7              LDRB     r7,[r4,#2]
;;;578                alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
;;;579                msk = 0;
;;;580                if ((ifn == USBD_SetupPacket.wIndexL) && (alt == USBD_SetupPacket.wValueL)) {
00005e  7930              LDRB     r0,[r6,#4]  ; USBD_SetupPacket
000060  78e5              LDRB     r5,[r4,#3]            ;578
000062  f04f0800          MOV      r8,#0                 ;579
000066  42b8              CMP      r0,r7
000068  d14b              BNE      |L37.258|
00006a  78b0              LDRB     r0,[r6,#2]  ; USBD_SetupPacket
00006c  42a8              CMP      r0,r5
00006e  d148              BNE      |L37.258|
;;;581                  set = __TRUE;
;;;582                  old = USBD_AltSetting[ifn];
000070  482d              LDR      r0,|L37.296|
000072  f04f0a01          MOV      r10,#1                ;581
000076  f810b007          LDRB     r11,[r0,r7]
;;;583                  USBD_AltSetting[ifn] = (U8)alt;
00007a  55c5              STRB     r5,[r0,r7]
00007c  e041              B        |L37.258|
                  |L37.126|
;;;584                }
;;;585                break;
;;;586              case USB_ENDPOINT_DESCRIPTOR_TYPE:
;;;587                if (ifn == USBD_SetupPacket.wIndexL) {
00007e  7930              LDRB     r0,[r6,#4]  ; USBD_SetupPacket
000080  42b8              CMP      r0,r7
000082  d13e              BNE      |L37.258|
;;;588                  n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
000084  78a0              LDRB     r0,[r4,#2]
000086  f000008f          AND      r0,r0,#0x8f
;;;589                  m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
00008a  9001              STR      r0,[sp,#4]
00008c  0600              LSLS     r0,r0,#24
00008e  d505              BPL      |L37.156|
000090  9801              LDR      r0,[sp,#4]
000092  f000010f          AND      r1,r0,#0xf
000096  f44f3080          MOV      r0,#0x10000
00009a  e001              B        |L37.160|
                  |L37.156|
00009c  9901              LDR      r1,[sp,#4]
00009e  2001              MOVS     r0,#1
                  |L37.160|
0000a0  4088              LSLS     r0,r0,r1
;;;590                  if (alt == USBD_SetupPacket.wValueL) {
0000a2  9000              STR      r0,[sp,#0]
0000a4  78b0              LDRB     r0,[r6,#2]  ; USBD_SetupPacket
0000a6  42a8              CMP      r0,r5
0000a8  d117              BNE      |L37.218|
;;;591                    USBD_EndPointMask |=  m;
0000aa  f8d91008          LDR      r1,[r9,#8]  ; USBD_EndPointMask
0000ae  9a00              LDR      r2,[sp,#0]
;;;592                    USBD_EndPointHalt &= ~m;
;;;593                    USBD_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
0000b0  4620              MOV      r0,r4
0000b2  4311              ORRS     r1,r1,r2              ;591
0000b4  f8c91008          STR      r1,[r9,#8]            ;592  ; USBD_EndPointMask
0000b8  f8d9100c          LDR      r1,[r9,#0xc]          ;592  ; USBD_EndPointHalt
0000bc  4391              BICS     r1,r1,r2              ;592
0000be  f8c9100c          STR      r1,[r9,#0xc]  ; USBD_EndPointHalt
0000c2  f7fffffe          BL       USBD_ConfigEP
;;;594                    USBD_EnableEP(n);
0000c6  9801              LDR      r0,[sp,#4]
0000c8  f7fffffe          BL       USBD_EnableEP
;;;595                    USBD_ResetEP(n);
0000cc  9801              LDR      r0,[sp,#4]
0000ce  f7fffffe          BL       USBD_ResetEP
;;;596                    msk |= m;
0000d2  9900              LDR      r1,[sp,#0]
0000d4  ea480801          ORR      r8,r8,r1
0000d8  e013              B        |L37.258|
                  |L37.218|
;;;597                  }
;;;598                  else if ((alt == old) && ((msk & m) == 0)) {
0000da  455d              CMP      r5,r11
0000dc  d111              BNE      |L37.258|
0000de  9900              LDR      r1,[sp,#0]
0000e0  ea180f01          TST      r8,r1
0000e4  d10d              BNE      |L37.258|
;;;599                    USBD_EndPointMask &= ~m;
0000e6  f8d91008          LDR      r1,[r9,#8]  ; USBD_EndPointMask
0000ea  9a00              LDR      r2,[sp,#0]
0000ec  4391              BICS     r1,r1,r2
;;;600                    USBD_EndPointHalt &= ~m;
0000ee  f8c91008          STR      r1,[r9,#8]  ; USBD_EndPointMask
0000f2  f8d9100c          LDR      r1,[r9,#0xc]  ; USBD_EndPointHalt
0000f6  4391              BICS     r1,r1,r2
;;;601                    USBD_DisableEP(n);
0000f8  f8c9100c          STR      r1,[r9,#0xc]  ; USBD_EndPointHalt
0000fc  9801              LDR      r0,[sp,#4]
0000fe  f7fffffe          BL       USBD_DisableEP
                  |L37.258|
;;;602                  }
;;;603                }
;;;604               break;
;;;605            }
;;;606            pD = (USB_COMMON_DESCRIPTOR *)((U8 *)pD + pD->bLength);
000102  7820              LDRB     r0,[r4,#0]
                  |L37.260|
000104  4404              ADD      r4,r4,r0
                  |L37.262|
000106  7820              LDRB     r0,[r4,#0]            ;568
000108  2800              CMP      r0,#0                 ;568
00010a  d198              BNE      |L37.62|
;;;607          }
;;;608          break;
;;;609        default:
;;;610          return (__FALSE);
;;;611      }
;;;612    
;;;613      return (set);
00010c  4650              MOV      r0,r10
                  |L37.270|
;;;614    }
00010e  e8bd9ffc          POP      {r2-r12,pc}
000112  e7ff              B        |L37.276|
                  |L37.276|
000114  2000              MOVS     r0,#0                 ;610
000116  e7fa              B        |L37.270|
;;;615    
                          ENDP

                  |L37.280|
                          DCD      ||.data||+0x1c
                  |L37.284|
                          DCD      usbd_hs_enable
                  |L37.288|
                          DCD      USBD_ConfigDescriptor_HS
                  |L37.292|
                          DCD      USBD_ConfigDescriptor
                  |L37.296|
                          DCD      USBD_AltSetting

                          AREA ||i.USBD_ReqGetStatus||, COMGROUP=USBD_ReqGetStatus, CODE, READONLY, ALIGN=2

                  USBD_ReqGetStatus PROC
;;;187    
;;;188    __inline BOOL USBD_ReqGetStatus (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;189      U32 n, m;
;;;190    
;;;191      switch (USBD_SetupPacket.bmRequestType.Recipient) {
000002  481c              LDR      r0,|L44.116|
;;;192        case REQUEST_TO_DEVICE:
;;;193          USBD_EP0Data.pData = (U8 *)&USBD_DeviceStatus;
000004  4d1b              LDR      r5,|L44.116|
000006  7800              LDRB     r0,[r0,#0]            ;191  ; USBD_SetupPacket
000008  f1a50508          SUB      r5,r5,#8
00000c  f010041f          ANDS     r4,r0,#0x1f           ;191
000010  d00a              BEQ      |L44.40|
000012  4818              LDR      r0,|L44.116|
;;;194          break;
;;;195        case REQUEST_TO_INTERFACE:
;;;196          if ((USBD_Configuration != 0) && (USBD_SetupPacket.wIndexL < USBD_NumInterfaces)) {
000014  f1a50114          SUB      r1,r5,#0x14
;;;197            *((__packed U16 *)USBD_EP0Buf) = 0;
000018  4b17              LDR      r3,|L44.120|
00001a  784a              LDRB     r2,[r1,#1]            ;196
00001c  7900              LDRB     r0,[r0,#4]            ;196
00001e  2c01              CMP      r4,#1                 ;191
000020  d006              BEQ      |L44.48|
000022  2c02              CMP      r4,#2                 ;191
000024  d124              BNE      |L44.112|
000026  e009              B        |L44.60|
                  |L44.40|
000028  4812              LDR      r0,|L44.116|
00002a  3816              SUBS     r0,r0,#0x16           ;193
00002c  6028              STR      r0,[r5,#0]            ;194  ; USBD_EP0Data
00002e  e01d              B        |L44.108|
                  |L44.48|
000030  b1f2              CBZ      r2,|L44.112|
000032  7889              LDRB     r1,[r1,#2]            ;196  ; USBD_NumInterfaces
000034  4288              CMP      r0,r1                 ;196
000036  d21b              BCS      |L44.112|
                  |L44.56|
000038  2000              MOVS     r0,#0
;;;198            USBD_EP0Data.pData = USBD_EP0Buf;
00003a  e015              B        |L44.104|
                  |L44.60|
;;;199          } else {
;;;200            return (__FALSE);
;;;201          }
;;;202          break;
;;;203        case REQUEST_TO_ENDPOINT:
;;;204          n = USBD_SetupPacket.wIndexL & 0x8F;
00003c  f000048f          AND      r4,r0,#0x8f
;;;205          m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
000040  0620              LSLS     r0,r4,#24
000042  d505              BPL      |L44.80|
000044  f004060f          AND      r6,r4,#0xf
000048  f44f3080          MOV      r0,#0x10000
00004c  40b0              LSLS     r0,r0,r6
00004e  e001              B        |L44.84|
                  |L44.80|
000050  2001              MOVS     r0,#1
000052  40a0              LSLS     r0,r0,r4
                  |L44.84|
;;;206          if (((USBD_Configuration != 0) || ((n & 0x0F) == 0)) && (USBD_EndPointMask & m)) {
000054  b90a              CBNZ     r2,|L44.90|
000056  0722              LSLS     r2,r4,#28
000058  d10a              BNE      |L44.112|
                  |L44.90|
00005a  688a              LDR      r2,[r1,#8]  ; USBD_EndPointMask
00005c  4202              TST      r2,r0
00005e  d007              BEQ      |L44.112|
;;;207            *((__packed U16 *)USBD_EP0Buf) = (USBD_EndPointHalt & m) ? 1 : 0;
000060  68c9              LDR      r1,[r1,#0xc]  ; USBD_EndPointHalt
000062  4201              TST      r1,r0
000064  d0e8              BEQ      |L44.56|
000066  2001              MOVS     r0,#1
                  |L44.104|
000068  8018              STRH     r0,[r3,#0]
;;;208            USBD_EP0Data.pData = USBD_EP0Buf;
00006a  602b              STR      r3,[r5,#0]  ; USBD_EP0Data
                  |L44.108|
;;;209          } else {
;;;210            return (__FALSE);
;;;211          }
;;;212          break;
;;;213        default:
;;;214          return (__FALSE);
;;;215      }
;;;216      return (__TRUE);
00006c  2001              MOVS     r0,#1
;;;217    }
00006e  bd70              POP      {r4-r6,pc}
                  |L44.112|
000070  2000              MOVS     r0,#0                 ;214
000072  bd70              POP      {r4-r6,pc}
;;;218    
                          ENDP

                  |L44.116|
                          DCD      ||.data||+0x1c
                  |L44.120|
                          DCD      USBD_EP0Buf

;*** Start embedded assembler ***

#line 1 "USBStack\\SRC\\usbd_core.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT ||$$USBD$$version||
#line 42
||$$USBD$$version|| PROC
#line 42

 

 EXPORT __RL_USBD_VER

__RL_USBD_VER EQU 0x470
	ENDP

;*** End   embedded assembler ***
