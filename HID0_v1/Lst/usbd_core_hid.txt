; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\usbd_core_hid.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\usbd_core_hid.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\app -I.\USBStack\INC -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC18xx -D__MICROLIB --omf_browse=.\obj\usbd_core_hid.crf USBStack\SRC\usbd_core_hid.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USBD_ReqGetDescriptor_HID PROC
;;;27     
;;;28     __weak BOOL USBD_ReqGetDescriptor_HID (U8 **pD, U32 *len) {
000000  b530              PUSH     {r4,r5,lr}
;;;29       switch (USBD_SetupPacket.wValueH) {
000002  4a43              LDR      r2,|L1.272|
;;;30         case HID_HID_DESCRIPTOR_TYPE:
;;;31           if (USBD_SetupPacket.wIndexL != usbd_hid_if_num) {
000004  4c43              LDR      r4,|L1.276|
;;;32             return (__FALSE);  /* Only Single HID Interface is supported */
;;;33           }
;;;34           if ((!usbd_hs_enable) && (USBD_HighSpeed == __TRUE)) {
;;;35             return (__FALSE);  /* High speed request but high-speed not enabled */
;;;36           }
;;;37           if (USBD_HighSpeed == __FALSE) {
;;;38             *pD = (U8 *)USBD_ConfigDescriptor;
;;;39           } else {
;;;40             *pD = (U8 *)USBD_ConfigDescriptor_HS;
;;;41           }
;;;42           USBD_EP0Data.pData = *pD + USBD_HID_DescriptorOffset;
000006  4b44              LDR      r3,|L1.280|
000008  78d5              LDRB     r5,[r2,#3]            ;29  ; USBD_SetupPacket
00000a  7912              LDRB     r2,[r2,#4]            ;31
00000c  2d21              CMP      r5,#0x21              ;29
00000e  d002              BEQ      |L1.22|
000010  2d22              CMP      r5,#0x22              ;29
000012  d120              BNE      |L1.86|
000014  e015              B        |L1.66|
                  |L1.22|
000016  7824              LDRB     r4,[r4,#0]            ;31  ; usbd_hid_if_num
000018  42a2              CMP      r2,r4                 ;31
00001a  d11c              BNE      |L1.86|
00001c  4a3f              LDR      r2,|L1.284|
00001e  7814              LDRB     r4,[r2,#0]            ;34  ; usbd_hs_enable
000020  4a3f              LDR      r2,|L1.288|
000022  7812              LDRB     r2,[r2,#0]            ;34
000024  b90c              CBNZ     r4,|L1.42|
000026  2a01              CMP      r2,#1                 ;34
000028  d015              BEQ      |L1.86|
                  |L1.42|
00002a  b142              CBZ      r2,|L1.62|
00002c  4a3d              LDR      r2,|L1.292|
                  |L1.46|
00002e  6002              STR      r2,[r0,#0]
000030  4610              MOV      r0,r2
000032  4a3d              LDR      r2,|L1.296|
000034  8812              LDRH     r2,[r2,#0]  ; USBD_HID_DescriptorOffset
000036  4410              ADD      r0,r0,r2
;;;43           *len = USB_HID_DESC_SIZE;
000038  6018              STR      r0,[r3,#0]  ; USBD_EP0Data
00003a  2009              MOVS     r0,#9
00003c  e008              B        |L1.80|
                  |L1.62|
00003e  4a3b              LDR      r2,|L1.300|
000040  e7f5              B        |L1.46|
                  |L1.66|
;;;44           break;
;;;45         case HID_REPORT_DESCRIPTOR_TYPE:
;;;46           if (USBD_SetupPacket.wIndexL != usbd_hid_if_num) {
000042  7820              LDRB     r0,[r4,#0]  ; usbd_hid_if_num
000044  4282              CMP      r2,r0
000046  d106              BNE      |L1.86|
;;;47             return (__FALSE);  /* Only Single HID Interface is supported */
;;;48           }
;;;49           USBD_EP0Data.pData = (U8 *)USBD_HID_ReportDescriptor;
000048  4839              LDR      r0,|L1.304|
;;;50           *len = USBD_HID_ReportDescriptorSize;
00004a  6018              STR      r0,[r3,#0]  ; USBD_EP0Data
00004c  4839              LDR      r0,|L1.308|
00004e  8800              LDRH     r0,[r0,#0]  ; USBD_HID_ReportDescriptorSize
                  |L1.80|
;;;51           break;
;;;52         case HID_PHYSICAL_DESCRIPTOR_TYPE:
;;;53           return (__FALSE);    /* HID Physical Descriptor is not supported */
;;;54         default:
;;;55           return (__FALSE);
;;;56       }
;;;57       return (__TRUE);
000050  6008              STR      r0,[r1,#0]
000052  2001              MOVS     r0,#1
;;;58     }
000054  bd30              POP      {r4,r5,pc}
                  |L1.86|
000056  2000              MOVS     r0,#0                 ;55
000058  bd30              POP      {r4,r5,pc}
;;;59     
                          ENDP

                  USBD_EndPoint0_Setup_HID_ReqToIF PROC
;;;66     
;;;67     __weak BOOL USBD_EndPoint0_Setup_HID_ReqToIF (void) {
00005a  e92d41f0          PUSH     {r4-r8,lr}
;;;68       if (USBD_SetupPacket.wIndexL == usbd_hid_if_num) {         /* IF number correct? */
00005e  4c2c              LDR      r4,|L1.272|
000060  492c              LDR      r1,|L1.276|
000062  7920              LDRB     r0,[r4,#4]  ; USBD_SetupPacket
000064  7809              LDRB     r1,[r1,#0]  ; usbd_hid_if_num
000066  4288              CMP      r0,r1
000068  d13c              BNE      |L1.228|
;;;69         switch (USBD_SetupPacket.bRequest) {
00006a  7860              LDRB     r0,[r4,#1]  ; USBD_SetupPacket
;;;70           case HID_REQUEST_GET_REPORT:
;;;71             if (USBD_HID_GetReport()) {
;;;72               if (USBD_SetupPacket.wValueH == HID_REPORT_INPUT) {
;;;73                 USBD_EP0Data.pData = &USBD_HID_InReport[1];      /* point to data to be sent (skip ReportID) */
00006c  4d2a              LDR      r5,|L1.280|
;;;74               }
;;;75               else if (USBD_SetupPacket.wValueH == HID_REPORT_FEATURE) {
;;;76                 USBD_EP0Data.pData = &USBD_HID_FeatReport[1];    /* point to data to be sent (skip ReportID) */
00006e  4e32              LDR      r6,|L1.312|
;;;77               }
;;;78               USBD_DataInStage();                                /* send requested data */
;;;79               return (__TRUE);
;;;80             }
;;;81             break;
;;;82           case HID_REQUEST_SET_REPORT:
;;;83             if (USBD_SetupPacket.wValueH == HID_REPORT_OUTPUT) {
;;;84               USBD_EP0Data.pData = &USBD_HID_OutReport[1];       /* out data to be received (skip ReportID) */
;;;85             }
;;;86             else if (USBD_SetupPacket.wValueH == HID_REPORT_FEATURE) {
;;;87               USBD_EP0Data.pData = &USBD_HID_FeatReport[1];      /* out data to be received (skip ReportID) */
;;;88             }
;;;89             return (__TRUE);
;;;90           case HID_REQUEST_GET_IDLE:
;;;91             if (USBD_HID_GetIdle()) {
;;;92               USBD_EP0Data.pData = USBD_EP0Buf;                  /* point to data to be sent */
000070  4f32              LDR      r7,|L1.316|
000072  280c              CMP      r0,#0xc               ;69
000074  d236              BCS      |L1.228|
000076  e8dff000          TBB      [pc,r0]               ;69
00007a  3506              DCB      0x35,0x06
00007c  212c3535          DCB      0x21,0x2c,0x35,0x35
000080  35353516          DCB      0x35,0x35,0x35,0x16
000084  2431              DCB      0x24,0x31
000086  f7fffffe          BL       USBD_HID_GetReport
00008a  b358              CBZ      r0,|L1.228|
00008c  78e0              LDRB     r0,[r4,#3]            ;72  ; USBD_SetupPacket
00008e  2801              CMP      r0,#1                 ;72
000090  d002              BEQ      |L1.152|
000092  2803              CMP      r0,#3                 ;75
000094  d003              BEQ      |L1.158|
000096  e003              B        |L1.160|
                  |L1.152|
000098  4829              LDR      r0,|L1.320|
00009a  6028              STR      r0,[r5,#0]            ;73  ; USBD_EP0Data
00009c  e000              B        |L1.160|
                  |L1.158|
00009e  602e              STR      r6,[r5,#0]            ;76  ; USBD_EP0Data
                  |L1.160|
0000a0  f7fffffe          BL       USBD_DataInStage
0000a4  e012              B        |L1.204|
0000a6  78e0              LDRB     r0,[r4,#3]            ;83  ; USBD_SetupPacket
0000a8  2802              CMP      r0,#2                 ;83
0000aa  d002              BEQ      |L1.178|
0000ac  2803              CMP      r0,#3                 ;86
0000ae  d003              BEQ      |L1.184|
0000b0  e00c              B        |L1.204|
                  |L1.178|
0000b2  4824              LDR      r0,|L1.324|
0000b4  6028              STR      r0,[r5,#0]            ;84  ; USBD_EP0Data
0000b6  e009              B        |L1.204|
                  |L1.184|
0000b8  602e              STR      r6,[r5,#0]            ;87  ; USBD_EP0Data
0000ba  e007              B        |L1.204|
0000bc  f7fffffe          BL       USBD_HID_GetIdle
0000c0  e009              B        |L1.214|
;;;93               USBD_DataInStage();                                /* send requested data */
;;;94               return (__TRUE);
;;;95             }
;;;96             break;
;;;97           case HID_REQUEST_SET_IDLE:
;;;98             if (USBD_HID_SetIdle()) {
0000c2  f7fffffe          BL       USBD_HID_SetIdle
0000c6  e00b              B        |L1.224|
                  |L1.200|
;;;99               USBD_StatusInStage();                              /* send Acknowledge */
0000c8  f7fffffe          BL       USBD_StatusInStage
                  |L1.204|
;;;100              return (__TRUE);
;;;101            }
;;;102            break;
;;;103          case HID_REQUEST_GET_PROTOCOL:
;;;104            if (USBD_HID_GetProtocol()) {
;;;105              USBD_EP0Data.pData = USBD_EP0Buf;                  /* point to data to be sent */
;;;106              USBD_DataInStage();                                /* send requested data */
;;;107              return (__TRUE);
;;;108            }
;;;109            break;
;;;110          case HID_REQUEST_SET_PROTOCOL:
;;;111            if (USBD_HID_SetProtocol()) {
;;;112              USBD_StatusInStage();                              /* send Acknowledge */
;;;113              return (__TRUE);
0000cc  2001              MOVS     r0,#1
                  |L1.206|
;;;114            }
;;;115            break;
;;;116        }
;;;117      }
;;;118      return (__FALSE);
;;;119    }
0000ce  e8bd81f0          POP      {r4-r8,pc}
0000d2  f7fffffe          BL       USBD_HID_GetProtocol
                  |L1.214|
0000d6  b128              CBZ      r0,|L1.228|
0000d8  602f              STR      r7,[r5,#0]            ;107  ; USBD_EP0Data
0000da  e7e1              B        |L1.160|
0000dc  f7fffffe          BL       USBD_HID_SetProtocol
                  |L1.224|
0000e0  2800              CMP      r0,#0                 ;111
0000e2  d1f1              BNE      |L1.200|
                  |L1.228|
0000e4  2000              MOVS     r0,#0                 ;118
0000e6  e7f2              B        |L1.206|
;;;120    
                          ENDP

                  USBD_EndPoint0_Out_HID_ReqToIF PROC
;;;127    
;;;128    __weak BOOL USBD_EndPoint0_Out_HID_ReqToIF (void) {
0000e8  b510              PUSH     {r4,lr}
;;;129      if (USBD_SetupPacket.wIndexL == usbd_hid_if_num) {   /* IF number correct? */
0000ea  4809              LDR      r0,|L1.272|
0000ec  4a09              LDR      r2,|L1.276|
0000ee  7901              LDRB     r1,[r0,#4]  ; USBD_SetupPacket
0000f0  7812              LDRB     r2,[r2,#0]  ; usbd_hid_if_num
0000f2  4291              CMP      r1,r2
0000f4  d109              BNE      |L1.266|
;;;130        switch (USBD_SetupPacket.bRequest) {
0000f6  7840              LDRB     r0,[r0,#1]  ; USBD_SetupPacket
0000f8  2809              CMP      r0,#9
0000fa  d106              BNE      |L1.266|
;;;131          case HID_REQUEST_SET_REPORT:
;;;132            if (USBD_HID_SetReport()) {
0000fc  f7fffffe          BL       USBD_HID_SetReport
000100  b118              CBZ      r0,|L1.266|
;;;133              USBD_StatusInStage();                        /* send Acknowledge */
000102  f7fffffe          BL       USBD_StatusInStage
;;;134              return (__TRUE);
000106  2001              MOVS     r0,#1
;;;135            }
;;;136            break;
;;;137        }
;;;138      }
;;;139      return (__FALSE);
;;;140    }
000108  bd10              POP      {r4,pc}
                  |L1.266|
00010a  2000              MOVS     r0,#0                 ;139
00010c  bd10              POP      {r4,pc}
                          ENDP

00010e  0000              DCW      0x0000
                  |L1.272|
                          DCD      USBD_SetupPacket
                  |L1.276|
                          DCD      usbd_hid_if_num
                  |L1.280|
                          DCD      USBD_EP0Data
                  |L1.284|
                          DCD      usbd_hs_enable
                  |L1.288|
                          DCD      USBD_HighSpeed
                  |L1.292|
                          DCD      USBD_ConfigDescriptor_HS
                  |L1.296|
                          DCD      USBD_HID_DescriptorOffset
                  |L1.300|
                          DCD      USBD_ConfigDescriptor
                  |L1.304|
                          DCD      USBD_HID_ReportDescriptor
                  |L1.308|
                          DCD      USBD_HID_ReportDescriptorSize
                  |L1.312|
                          DCD      USBD_HID_FeatReport+0x1
                  |L1.316|
                          DCD      USBD_EP0Buf
                  |L1.320|
                          DCD      USBD_HID_InReport+0x1
                  |L1.324|
                          DCD      USBD_HID_OutReport+0x1
