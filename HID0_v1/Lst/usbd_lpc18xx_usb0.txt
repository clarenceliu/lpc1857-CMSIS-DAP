; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\usbd_lpc18xx_usb0.o --asm_dir=.\Lst\ --list_dir=.\Lst\ --depend=.\obj\usbd_lpc18xx_usb0.d --cpu=Cortex-M3 --apcs=interwork -O3 -I.\app -I.\USBStack\INC -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LPC18xx -D__MICROLIB --omf_browse=.\obj\usbd_lpc18xx_usb0.crf usbd_LPC18xx_USB0.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USBD_Intr PROC
;;;94     #else 
;;;95     void USBD_Intr (int ena) {
000000  f44f7280          MOV      r2,#0x100
000004  f04f21e0          MOV      r1,#0xe000e000
000008  b110              CBZ      r0,|L1.16|
00000a  f8c12100          STR      r2,[r1,#0x100]
;;;96     #endif
;;;97       if (ena) {
;;;98         NVIC_EnableIRQ  (USB0_IRQn);        /* Enable USB interrupt               */
;;;99       } else {
;;;100        NVIC_DisableIRQ (USB0_IRQn);        /* Disable USB interrupt              */
;;;101      }
;;;102    }
00000e  4770              BX       lr
                  |L1.16|
000010  f8c12180          STR      r2,[r1,#0x180]
000014  4770              BX       lr
;;;103    
                          ENDP

                  USBD_PrimeEp PROC
;;;513    
;;;514    void USBD_PrimeEp (uint32_t EPNum, uint32_t cnt) {
000016  b570              PUSH     {r4-r6,lr}
;;;515      uint32_t idx, val;
;;;516    
;;;517      /* IN endpoint                                                              */
;;;518      if (EPNum & 0x80) {
000018  0602              LSLS     r2,r0,#24
;;;519        EPNum &= 0x7F;
;;;520        idx    = EP_IN_IDX(EPNum);
00001a  f04f0301          MOV      r3,#1
00001e  d507              BPL      |L1.48|
000020  f000007f          AND      r0,r0,#0x7f           ;519
000024  eb030440          ADD      r4,r3,r0,LSL #1
;;;521        val    = (1UL << (EPNum + 16));
000028  3010              ADDS     r0,r0,#0x10
00002a  fa03f200          LSL      r2,r3,r0
00002e  e002              B        |L1.54|
                  |L1.48|
;;;522      }
;;;523      /* OUT endpoint                                                             */
;;;524      else {
;;;525        val    = (1UL << EPNum);
000030  fa03f200          LSL      r2,r3,r0
;;;526        idx    = EP_OUT_IDX(EPNum);
000034  0044              LSLS     r4,r0,#1
                  |L1.54|
;;;527      } 
;;;528    
;;;529      dTDx[idx].buf[0]    = (uint32_t)(Ep[idx].buf);
000036  4dfe              LDR      r5,|L1.1072|
000038  f1a50080          SUB      r0,r5,#0x80
00003c  eb001044          ADD      r0,r0,r4,LSL #5
000040  f8556034          LDR      r6,[r5,r4,LSL #3]
;;;530      dTDx[idx].next_dTD  = 1;
;;;531      
;;;532      if (IsoEp & val) {
000044  6086              STR      r6,[r0,#8]
000046  6003              STR      r3,[r0,#0]
000048  4bfa              LDR      r3,|L1.1076|
00004a  685b              LDR      r3,[r3,#4]  ; IsoEp
00004c  4013              ANDS     r3,r3,r2
00004e  d00f              BEQ      |L1.112|
;;;533        if (Ep[idx].maxPacket <= cnt) {
000050  eb0503c4          ADD      r3,r5,r4,LSL #3
000054  685b              LDR      r3,[r3,#4]
000056  428b              CMP      r3,r1
000058  d802              BHI      |L1.96|
;;;534          dTDx[idx].dTD_token = (1 << 10);             /* MultO = 1               */
00005a  f44f6380          MOV      r3,#0x400
00005e  e007              B        |L1.112|
                  |L1.96|
;;;535        }
;;;536        else if ((Ep[idx].maxPacket * 2) <= cnt) {
000060  ebb10f43          CMP      r1,r3,LSL #1
000064  d302              BCC      |L1.108|
;;;537          dTDx[idx].dTD_token = (2 << 10);             /* MultO = 2               */
000066  f44f6300          MOV      r3,#0x800
00006a  e001              B        |L1.112|
                  |L1.108|
;;;538        }
;;;539        else {
;;;540          dTDx[idx].dTD_token = (3 << 10);             /* MultO = 3               */
00006c  f44f6340          MOV      r3,#0xc00
                  |L1.112|
;;;541        }
;;;542      }
;;;543      else {
;;;544        dTDx[idx].dTD_token = 0;
;;;545      }
;;;546    
;;;547      dTDx[idx].dTD_token  |= (cnt   << 16) |          /* bytes to transfer       */
000070  f2480580          MOV      r5,#0x8080
000074  ea454101          ORR      r1,r5,r1,LSL #16
000078  430b              ORRS     r3,r3,r1
;;;548                              (1UL   << 15) |          /* int on complete         */
;;;549                               0x80;                   /* status - active         */
;;;550    
;;;551      EPQHx[idx].next_dTD   = (uint32_t)(&dTDx[idx]);
00007a  49ef              LDR      r1,|L1.1080|
00007c  6043              STR      r3,[r0,#4]
00007e  eb011184          ADD      r1,r1,r4,LSL #6
;;;552      EPQHx[idx].dTD_token &= ~0xC0;
000082  6088              STR      r0,[r1,#8]
000084  68c8              LDR      r0,[r1,#0xc]
000086  f02000c0          BIC      r0,r0,#0xc0
;;;553    
;;;554      LPC_USBx->ENDPTPRIME = (val);
00008a  60c8              STR      r0,[r1,#0xc]
00008c  48eb              LDR      r0,|L1.1084|
00008e  f8c021b0          STR      r2,[r0,#0x1b0]
;;;555      while ((LPC_USBx->ENDPTPRIME & val));
000092  bf00              NOP      
                  |L1.148|
000094  f8d011b0          LDR      r1,[r0,#0x1b0]
000098  4211              TST      r1,r2
00009a  d1fb              BNE      |L1.148|
;;;556    }
00009c  bd70              POP      {r4-r6,pc}
;;;557    
                          ENDP

                  USBD_Reset PROC
;;;184    
;;;185    void USBD_Reset (void) {
00009e  4be5              LDR      r3,|L1.1076|
0000a0  b430              PUSH     {r4,r5}
;;;186      uint32_t i;
;;;187      uint8_t * ptr;
;;;188    
;;;189      cmpl_pnd = 0;
0000a2  48e7              LDR      r0,|L1.1088|
0000a4  2100              MOVS     r1,#0
;;;190    
;;;191      for (i = 1; i < USBD_EP_NUM + 1; i++) {
;;;192        ENDPTCTRL(i) &= ~((1UL << 7) | (1UL << 23));
0000a6  6099              STR      r1,[r3,#8]  ; cmpl_pnd
0000a8  6804              LDR      r4,[r0,#0]
0000aa  f0241480          BIC      r4,r4,#0x800080
0000ae  6004              STR      r4,[r0,#0]
;;;193      }
;;;194    
;;;195      /* clear interrupts                                                         */
;;;196      LPC_USBx->ENDPTNAK       = 0xFFFFFFFF;
0000b0  4ae3              LDR      r2,|L1.1088|
0000b2  1e48              SUBS     r0,r1,#1
0000b4  3a80              SUBS     r2,r2,#0x80
0000b6  6350              STR      r0,[r2,#0x34]
;;;197      LPC_USBx->ENDPTNAKEN     = 0;
0000b8  6391              STR      r1,[r2,#0x38]
;;;198      LPC_USBx->USBSTS_D       = 0xFFFFFFFF;
0000ba  6010              STR      r0,[r2,#0]
;;;199      LPC_USBx->ENDPTSETUPSTAT = LPC_USBx->ENDPTSETUPSTAT;
0000bc  6e94              LDR      r4,[r2,#0x68]
0000be  6694              STR      r4,[r2,#0x68]
;;;200      LPC_USBx->ENDPTCOMPLETE  = LPC_USBx->ENDPTCOMPLETE;
0000c0  6f94              LDR      r4,[r2,#0x78]
0000c2  6794              STR      r4,[r2,#0x78]
0000c4  f5a272a2          SUB      r2,r2,#0x144
                  |L1.200|
;;;201      while (LPC_USBx->ENDPTPRIME);
0000c8  f8d241b0          LDR      r4,[r2,#0x1b0]
0000cc  2c00              CMP      r4,#0
0000ce  d1fb              BNE      |L1.200|
;;;202    
;;;203      LPC_USBx->ENDPTFLUSH = 0xFFFFFFFF;
0000d0  f8c201b4          STR      r0,[r2,#0x1b4]
                  |L1.212|
;;;204      while (LPC_USBx->ENDPTFLUSH);
0000d4  f8d201b4          LDR      r0,[r2,#0x1b4]
0000d8  2800              CMP      r0,#0
0000da  d1fb              BNE      |L1.212|
;;;205    
;;;206      LPC_USBx->USBCMD_D &= ~0x00FF0000;    /* immediate intrrupt treshold        */
0000dc  f8d20140          LDR      r0,[r2,#0x140]
0000e0  f420007f          BIC      r0,r0,#0xff0000
0000e4  f8c20140          STR      r0,[r2,#0x140]
;;;207    
;;;208      /* clear ednpoint queue heads                                               */
;;;209      ptr = (uint8_t *)EPQHx;
0000e8  4cd3              LDR      r4,|L1.1080|
;;;210      for (i = 0; i < (sizeof(EPQHx)*((USBD_EP_NUM + 1) * 2)); i++) {
0000ea  2000              MOVS     r0,#0
0000ec  f44f6580          MOV      r5,#0x400
                  |L1.240|
;;;211        ptr[i] = 0;
0000f0  5421              STRB     r1,[r4,r0]
0000f2  1c40              ADDS     r0,r0,#1              ;210
0000f4  42a8              CMP      r0,r5                 ;210
0000f6  d3fb              BCC      |L1.240|
;;;212      }
;;;213    
;;;214      /* clear endpoint transfer descriptors                                      */
;;;215      ptr = (uint8_t *)dTDx;
0000f8  4ccd              LDR      r4,|L1.1072|
;;;216      for (i = 0; i < (sizeof(dTDx)*((USBD_EP_NUM + 1) * 2)); i++) {
0000fa  f44f7500          MOV      r5,#0x200
0000fe  3c80              SUBS     r4,r4,#0x80           ;215
000100  2000              MOVS     r0,#0
                  |L1.258|
;;;217        ptr[i] = 0;
000102  5421              STRB     r1,[r4,r0]
000104  1c40              ADDS     r0,r0,#1              ;216
000106  42a8              CMP      r0,r5                 ;216
000108  d3fb              BCC      |L1.258|
;;;218      }
;;;219    
;;;220      Ep[EP_OUT_IDX(0)].maxPacket  = USBD_MAX_PACKET0;
00010a  48c9              LDR      r0,|L1.1072|
00010c  2108              MOVS     r1,#8
;;;221      Ep[EP_OUT_IDX(0)].buf        = EPBufPool;
00010e  f5006468          ADD      r4,r0,#0xe80
000112  e9c04100          STRD     r4,r1,[r0,#0]
;;;222      BufUsed                      = USBD_MAX_PACKET0;
;;;223      Ep[EP_IN_IDX(0)].maxPacket   = USBD_MAX_PACKET0;
;;;224      Ep[EP_IN_IDX(0)].buf         = &(EPBufPool[BufUsed]);
000116  3408              ADDS     r4,r4,#8
000118  e9c04102          STRD     r4,r1,[r0,#8]
;;;225      BufUsed                     += USBD_MAX_PACKET0;
00011c  2010              MOVS     r0,#0x10
;;;226    
;;;227      dTDx[EP_OUT_IDX(0)].next_dTD = 1;
00011e  6018              STR      r0,[r3,#0]  ; BufUsed
000120  f6a47308          SUB      r3,r4,#0xf08
000124  2001              MOVS     r0,#1
;;;228      dTDx[EP_IN_IDX( 0)].next_dTD = 1;
000126  6018              STR      r0,[r3,#0]  ; dTDx
;;;229    
;;;230      dTDx[EP_OUT_IDX(0)].dTD_token = (USBD_MAX_PACKET0 << 16) | /* total bytes   */
000128  6218              STR      r0,[r3,#0x20]  ; dTDx
00012a  f44f2008          MOV      r0,#0x88000
;;;231                                      (1UL << 15);               /* int on compl  */
;;;232      dTDx[EP_IN_IDX( 0)].dTD_token = (USBD_MAX_PACKET0 << 16) | /* total bytes   */
00012e  6058              STR      r0,[r3,#4]  ; dTDx
;;;233                                      (1UL << 15);               /* int on compl  */
;;;234    
;;;235      EPQHx[EP_OUT_IDX(0)].next_dTD = (uint32_t) &dTDx[EP_OUT_IDX(0)];
000130  6258              STR      r0,[r3,#0x24]  ; dTDx
000132  48c1              LDR      r0,|L1.1080|
;;;236      EPQHx[EP_IN_IDX( 0)].next_dTD = (uint32_t) &dTDx[EP_IN_IDX( 0)];
;;;237    
;;;238      EPQHx[EP_OUT_IDX(0)].cap = ((USBD_MAX_PACKET0 & 0x0EFF) << 16) |
;;;239                                 (1UL << 29) |
;;;240                                 (1UL << 15);                    /* int on setup  */
;;;241    
;;;242      EPQHx[EP_IN_IDX( 0)].cap = (USBD_MAX_PACKET0 << 16) |
000134  f50272ac          ADD      r2,r2,#0x158
000138  6083              STR      r3,[r0,#8]            ;236  ; EPQHx
00013a  3320              ADDS     r3,r3,#0x20           ;236
00013c  6483              STR      r3,[r0,#0x48]         ;238  ; EPQHx
00013e  4bc1              LDR      r3,|L1.1092|
000140  6003              STR      r3,[r0,#0]  ; EPQHx
;;;243                                 (1UL << 29) |
;;;244                                 (1UL << 15);                    /* int on setup  */
;;;245    
;;;246      LPC_USBx->ENDPOINTLISTADDR = (uint32_t)EPQHx;
000142  6403              STR      r3,[r0,#0x40]  ; EPQHx
000144  6010              STR      r0,[r2,#0]
;;;247    
;;;248      LPC_USBx->USBMODE_D |= (1UL << 3 );   /* Setup lockouts off                 */
000146  6d10              LDR      r0,[r2,#0x50]
000148  f0400008          ORR      r0,r0,#8
00014c  6510              STR      r0,[r2,#0x50]
;;;249      LPC_USBx->ENDPTCTRL0 = 0x00C000C0;
00014e  f04f10c0          MOV      r0,#0xc000c0
000152  6690              STR      r0,[r2,#0x68]
;;;250    
;;;251      USBD_PrimeEp(0, Ep[EP_OUT_IDX(0)].maxPacket);
000154  bc30              POP      {r4,r5}
000156  2000              MOVS     r0,#0
000158  e7fe              B        USBD_PrimeEp
;;;252    }
;;;253    
                          ENDP

                  USBD_Init PROC
;;;110    
;;;111    void USBD_Init (void) {
00015a  b500              PUSH     {lr}
;;;112    
;;;113      USBD_Intr(0);
00015c  2000              MOVS     r0,#0
00015e  f7fffffe          BL       USBD_Intr
;;;114    
;;;115      /* BASE_USB0_CLK                                                            */
;;;116      LPC_CGU->BASE_USB0_CLK   = (0x01 << 11) |       /* Autoblock En             */
000162  49ba              LDR      r1,|L1.1100|
000164  48b8              LDR      r0,|L1.1096|
000166  6608              STR      r0,[r1,#0x60]
;;;117                                 (0x07 << 24) ;       /* Clock source: PLL0       */
;;;118      LPC_CCU1->CLK_M3_USB0_CFG |= 1;
000168  48b9              LDR      r0,|L1.1104|
00016a  6801              LDR      r1,[r0,#0]
00016c  f0410101          ORR      r1,r1,#1
000170  6001              STR      r1,[r0,#0]
;;;119      while (!(LPC_CCU1->CLK_M3_USB0_STAT & 1));
000172  1d00              ADDS     r0,r0,#4
                  |L1.372|
000174  6801              LDR      r1,[r0,#0]
000176  07c9              LSLS     r1,r1,#31
000178  d0fc              BEQ      |L1.372|
;;;120    
;;;121      LPC_SCU->SFSP6_3 = 1;                 /* pwr en                             */
00017a  49b6              LDR      r1,|L1.1108|
00017c  2001              MOVS     r0,#1
00017e  6008              STR      r0,[r1,#0]
;;;122      LPC_SCU->SFSP6_6 = 3;                 /* pwr fault                          */
000180  2203              MOVS     r2,#3
000182  60ca              STR      r2,[r1,#0xc]
;;;123      LPC_SCU->SFSP8_1 = 1;                 /* port indicator LED control out 1   */
000184  49b3              LDR      r1,|L1.1108|
000186  31f8              ADDS     r1,r1,#0xf8
000188  6008              STR      r0,[r1,#0]
;;;124      LPC_SCU->SFSP8_2 = 1;                 /* port indicator LED control out 0   */
00018a  1d09              ADDS     r1,r1,#4
00018c  6008              STR      r0,[r1,#0]
;;;125    
;;;126      LPC_USBx->USBCMD_D |= (1UL << 1);     /* usb reset                          */
00018e  48ab              LDR      r0,|L1.1084|
000190  f8d01140          LDR      r1,[r0,#0x140]
000194  f0410102          ORR      r1,r1,#2
000198  f8c01140          STR      r1,[r0,#0x140]
                  |L1.412|
;;;127      while (LPC_USBx->USBCMD_D & (1UL << 1));
00019c  f8d01140          LDR      r1,[r0,#0x140]
0001a0  0789              LSLS     r1,r1,#30
0001a2  d4fb              BMI      |L1.412|
;;;128    
;;;129      LPC_CREG->CREG0 &= ~(1 << 5);
0001a4  49ac              LDR      r1,|L1.1112|
0001a6  684a              LDR      r2,[r1,#4]
0001a8  f0220220          BIC      r2,r2,#0x20
0001ac  604a              STR      r2,[r1,#4]
;;;130    
;;;131      LPC_USBx->USBMODE_D  = 2 | (1UL << 3);/* device mode                        */
0001ae  210a              MOVS     r1,#0xa
0001b0  f8c011a8          STR      r1,[r0,#0x1a8]
;;;132    
;;;133    #if USBD_HS_ENABLE
;;;134      LPC_USBx->PORTSC1_D &= ~(1UL << 24);
0001b4  f8d01184          LDR      r1,[r0,#0x184]
0001b8  f0217180          BIC      r1,r1,#0x1000000
0001bc  f8c01184          STR      r1,[r0,#0x184]
;;;135    #else
;;;136      LPC_USBx->PORTSC1_D |=  (1UL << 24);
;;;137    #endif
;;;138    
;;;139    
;;;140      LPC_USBx->OTGSC = 1 | (1UL << 3);
0001c0  2109              MOVS     r1,#9
0001c2  f8c011a4          STR      r1,[r0,#0x1a4]
;;;141    
;;;142      Ep[EP_OUT_IDX(0)].maxPacket = USBD_MAX_PACKET0;
0001c6  4a9a              LDR      r2,|L1.1072|
0001c8  2108              MOVS     r1,#8
;;;143    
;;;144      LPC_USBx->USBINTR_D  = (1UL << 0 ) |  /* usb int enable                     */
0001ca  6051              STR      r1,[r2,#4]  ; Ep
0001cc  49a3              LDR      r1,|L1.1116|
0001ce  6809              LDR      r1,[r1,#0]  ; USBD_P_SOF_Event
0001d0  b101              CBZ      r1,|L1.468|
;;;145                             (1UL << 2 ) |  /* port change detect int enable      */
;;;146                             (1UL << 8 ) |  /* suspend int enable                 */
;;;147                             (1UL << 16) |  /* nak int enable                     */
;;;148                             (1UL << 6 ) |  /* reset int enable                   */
;;;149    #ifdef __RTX
;;;150                  ((USBD_RTX_DevTask   != 0) ? (1UL << 7) : 0) |   /* SOF         */
;;;151                  ((USBD_RTX_DevTask   != 0) ? (1UL << 1) : 0) ;   /* Error       */
;;;152    #else
;;;153                  ((USBD_P_SOF_Event   != 0) ? (1UL << 7) : 0) |   /* SOF         */
0001d2  2180              MOVS     r1,#0x80
                  |L1.468|
0001d4  4aa2              LDR      r2,|L1.1120|
0001d6  6812              LDR      r2,[r2,#0]  ; USBD_P_Error_Event
0001d8  b102              CBZ      r2,|L1.476|
;;;154                  ((USBD_P_Error_Event != 0) ? (1UL << 1) : 0) ;   /* Error       */
0001da  2202              MOVS     r2,#2
                  |L1.476|
0001dc  4311              ORRS     r1,r1,r2
0001de  4aa1              LDR      r2,|L1.1124|
0001e0  4311              ORRS     r1,r1,r2
0001e2  f8c01148          STR      r1,[r0,#0x148]
;;;155    #endif
;;;156    
;;;157      USBD_Reset();
0001e6  f7fffffe          BL       USBD_Reset
;;;158      USBD_Intr(1);
0001ea  2001              MOVS     r0,#1
0001ec  f85deb04          POP      {lr}
0001f0  e7fe              B        USBD_Intr
;;;159    }
;;;160    
                          ENDP

                  USBD_Connect PROC
;;;168    
;;;169    void USBD_Connect (uint32_t con) {
0001f2  4992              LDR      r1,|L1.1084|
;;;170      if (con) {
0001f4  2800              CMP      r0,#0
;;;171        LPC_USBx->USBCMD_D |= 1;            /* run                                */
;;;172      }
;;;173      else {
;;;174        LPC_USBx->USBCMD_D &= ~1;           /* stop                               */
0001f6  f8d10140          LDR      r0,[r1,#0x140]
0001fa  d002              BEQ      |L1.514|
0001fc  f0400001          ORR      r0,r0,#1              ;171
000200  e001              B        |L1.518|
                  |L1.514|
000202  f0200001          BIC      r0,r0,#1
                  |L1.518|
000206  f8c10140          STR      r0,[r1,#0x140]        ;171
;;;175      }
;;;176    }
00020a  4770              BX       lr
;;;177    
                          ENDP

                  USBD_Suspend PROC
;;;260    
;;;261    void USBD_Suspend (void) {
00020c  4770              BX       lr
;;;262      /* Performed by Hardware */
;;;263    }
;;;264    
                          ENDP

                  USBD_Resume PROC
;;;271    
;;;272    void USBD_Resume (void) {
00020e  4770              BX       lr
;;;273      /* Performed by Hardware */
;;;274    }
;;;275    
                          ENDP

                  USBD_WakeUp PROC
;;;282    
;;;283    void USBD_WakeUp (void) {
000210  488b              LDR      r0,|L1.1088|
000212  3840              SUBS     r0,r0,#0x40
;;;284      LPC_USBx->PORTSC1_D |= (1UL << 6);
000214  6801              LDR      r1,[r0,#0]
000216  f0410140          ORR      r1,r1,#0x40
00021a  6001              STR      r1,[r0,#0]
;;;285    }
00021c  4770              BX       lr
;;;286    
                          ENDP

                  USBD_WakeUpCfg PROC
;;;293    
;;;294    void USBD_WakeUpCfg (uint32_t cfg) {
00021e  4770              BX       lr
;;;295      /* Not needed */
;;;296    }
;;;297    
                          ENDP

                  USBD_SetAddress PROC
;;;304    
;;;305    void USBD_SetAddress (uint32_t adr, uint32_t setup) {
000220  2900              CMP      r1,#0
000222  d107              BNE      |L1.564|
;;;306      if (setup == 0) {
;;;307        LPC_USBx->DEVICEADDR  = (adr << 25);
000224  0641              LSLS     r1,r0,#25
000226  4886              LDR      r0,|L1.1088|
000228  3870              SUBS     r0,r0,#0x70
00022a  6001              STR      r1,[r0,#0]
;;;308        LPC_USBx->DEVICEADDR |= (1UL << 24);
00022c  6801              LDR      r1,[r0,#0]
00022e  f0417180          ORR      r1,r1,#0x1000000
000232  6001              STR      r1,[r0,#0]
                  |L1.564|
;;;309      }
;;;310    }
000234  4770              BX       lr
;;;311    
                          ENDP

                  USBD_Configure PROC
;;;318    
;;;319    void USBD_Configure (uint32_t cfg) {
000236  2800              CMP      r0,#0
000238  d10d              BNE      |L1.598|
;;;320      uint32_t i;
;;;321    
;;;322      if (!cfg) {
;;;323        for (i = 2; i < (2 * (USBD_EP_NUM + 1)); i++) {
00023a  2002              MOVS     r0,#2
;;;324          Ep[i].buf       = 0;
00023c  4a7c              LDR      r2,|L1.1072|
00023e  2100              MOVS     r1,#0                 ;323
                  |L1.576|
;;;325          Ep[i].maxPacket = 0;
000240  eb0203c0          ADD      r3,r2,r0,LSL #3
000244  f8421030          STR      r1,[r2,r0,LSL #3]     ;324
000248  1c40              ADDS     r0,r0,#1              ;323
00024a  6059              STR      r1,[r3,#4]            ;323
00024c  2804              CMP      r0,#4                 ;323
00024e  d3f7              BCC      |L1.576|
;;;326        }
;;;327        BufUsed           = 2 * USBD_MAX_PACKET0;
000250  4978              LDR      r1,|L1.1076|
000252  2010              MOVS     r0,#0x10
000254  6008              STR      r0,[r1,#0]  ; BufUsed
                  |L1.598|
;;;328      }
;;;329    }
000256  4770              BX       lr
;;;330    
                          ENDP

                  USBD_ConfigEP PROC
;;;337    
;;;338    void USBD_ConfigEP (USB_ENDPOINT_DESCRIPTOR *pEPD) {
000258  e92d43f0          PUSH     {r4-r9,lr}
;;;339      uint32_t num, val, type, idx;
;;;340    
;;;341      if ((pEPD->bEndpointAddress & USB_ENDPOINT_DIRECTION_MASK)) {
00025c  7882              LDRB     r2,[r0,#2]
;;;342        val = 16;
;;;343        num = pEPD->bEndpointAddress & ~0x80;
;;;344        idx = EP_IN_IDX(num);
00025e  f04f0501          MOV      r5,#1
000262  0611              LSLS     r1,r2,#24             ;341
000264  d505              BPL      |L1.626|
000266  f0220280          BIC      r2,r2,#0x80           ;343
00026a  2410              MOVS     r4,#0x10              ;342
00026c  eb050142          ADD      r1,r5,r2,LSL #1
000270  e001              B        |L1.630|
                  |L1.626|
;;;345      }
;;;346      else {
;;;347        val = 0;
000272  2400              MOVS     r4,#0
;;;348        num = pEPD->bEndpointAddress;
;;;349        idx = EP_OUT_IDX(num);
000274  0051              LSLS     r1,r2,#1
                  |L1.630|
;;;350      }
;;;351    
;;;352      type = pEPD->bmAttributes & USB_ENDPOINT_TYPE_MASK;
000276  78c3              LDRB     r3,[r0,#3]
000278  f0030603          AND      r6,r3,#3
;;;353    
;;;354      if (!(Ep[idx].buf)) {
00027c  4b6c              LDR      r3,|L1.1072|
00027e  f8537031          LDR      r7,[r3,r1,LSL #3]
000282  b9ef              CBNZ     r7,|L1.704|
;;;355        Ep[idx].buf          =  &(EPBufPool[BufUsed]);
000284  f8df91ac          LDR      r9,|L1.1076|
000288  f5036c68          ADD      r12,r3,#0xe80
;;;356        Ep[idx].maxPacket    =  pEPD->wMaxPacketSize;
00028c  eb0308c1          ADD      r8,r3,r1,LSL #3
000290  f8d97000          LDR      r7,[r9,#0]            ;355  ; BufUsed
;;;357        BufUsed             +=  pEPD->wMaxPacketSize;
;;;358        
;;;359        /* Isochronous endpoint                                                   */
;;;360        if (type == USB_ENDPOINT_TYPE_ISOCHRONOUS) {
000294  2e01              CMP      r6,#1
000296  44bc              ADD      r12,r12,r7            ;355
000298  f843c031          STR      r12,[r3,r1,LSL #3]    ;355
00029c  f8b0c004          LDRH     r12,[r0,#4]           ;356
0002a0  f8c8c004          STR      r12,[r8,#4]           ;357
0002a4  8880              LDRH     r0,[r0,#4]            ;357
0002a6  4407              ADD      r7,r7,r0              ;357
0002a8  f8c97000          STR      r7,[r9,#0]  ; BufUsed
0002ac  d108              BNE      |L1.704|
;;;361          IsoEp |= (1UL << (num + val));
0002ae  1917              ADDS     r7,r2,r4
0002b0  f8d9c004          LDR      r12,[r9,#4]  ; IsoEp
0002b4  fa05f007          LSL      r0,r5,r7
0002b8  ea40000c          ORR      r0,r0,r12
0002bc  f8c90004          STR      r0,[r9,#4]  ; IsoEp
                  |L1.704|
;;;362        }
;;;363      }
;;;364    
;;;365      dTDx[idx].buf[0]    = (uint32_t)(Ep[idx].buf);
0002c0  485b              LDR      r0,|L1.1072|
0002c2  f8537031          LDR      r7,[r3,r1,LSL #3]
0002c6  3880              SUBS     r0,r0,#0x80
0002c8  eb001041          ADD      r0,r0,r1,LSL #5
;;;366      dTDx[idx].next_dTD  =  1;
;;;367      EPQHx[idx].cap      = (Ep[idx].maxPacket << 16) |
0002cc  6087              STR      r7,[r0,#8]
0002ce  6005              STR      r5,[r0,#0]
0002d0  eb0300c1          ADD      r0,r3,r1,LSL #3
0002d4  f04f5300          MOV      r3,#0x20000000
0002d8  8880              LDRH     r0,[r0,#4]
0002da  ea434000          ORR      r0,r3,r0,LSL #16
0002de  4b56              LDR      r3,|L1.1080|
0002e0  eb031181          ADD      r1,r3,r1,LSL #6
;;;368                            (1UL               << 29);
;;;369    
;;;370      ENDPTCTRL(num)  &= ~(0xFFFF << val);
0002e4  6008              STR      r0,[r1,#0]
0002e6  4855              LDR      r0,|L1.1084|
0002e8  eb000082          ADD      r0,r0,r2,LSL #2
0002ec  f50070e0          ADD      r0,r0,#0x1c0
0002f0  6801              LDR      r1,[r0,#0]
0002f2  f64f72ff          MOV      r2,#0xffff
0002f6  40a2              LSLS     r2,r2,r4
0002f8  4391              BICS     r1,r1,r2
0002fa  6001              STR      r1,[r0,#0]
;;;371      ENDPTCTRL(num)  |=  ((type << 2) << val) |
0002fc  6801              LDR      r1,[r0,#0]
0002fe  2240              MOVS     r2,#0x40
000300  ea420286          ORR      r2,r2,r6,LSL #2
000304  40a2              LSLS     r2,r2,r4
000306  4311              ORRS     r1,r1,r2
000308  6001              STR      r1,[r0,#0]
;;;372                          ((1UL  << 6) << val);   /* Data toogle reset            */
;;;373    }
00030a  e8bd83f0          POP      {r4-r9,pc}
;;;374    
                          ENDP

                  USBD_DirCtrlEP PROC
;;;381    
;;;382    void USBD_DirCtrlEP (uint32_t dir) {
00030e  4770              BX       lr
;;;383      /* Not needed */
;;;384    }
;;;385    
                          ENDP

                  USBD_EnableEP PROC
;;;394    
;;;395    void USBD_EnableEP (uint32_t EPNum) {
000310  494a              LDR      r1,|L1.1084|
;;;396      if (EPNum & 0x80) {
000312  0602              LSLS     r2,r0,#24
000314  d508              BPL      |L1.808|
;;;397        EPNum &= 0x7F;
000316  f000007f          AND      r0,r0,#0x7f
;;;398        ENDPTCTRL(EPNum) |= (1UL << 23);    /* EP enabled                         */
00031a  eb010080          ADD      r0,r1,r0,LSL #2
00031e  f8d011c0          LDR      r1,[r0,#0x1c0]
000322  f4410100          ORR      r1,r1,#0x800000
000326  e005              B        |L1.820|
                  |L1.808|
;;;399      }
;;;400      else {
;;;401        ENDPTCTRL(EPNum) |= (1UL << 7 );    /* EP enabled                         */
000328  eb010080          ADD      r0,r1,r0,LSL #2
00032c  f8d011c0          LDR      r1,[r0,#0x1c0]
000330  f0410180          ORR      r1,r1,#0x80
                  |L1.820|
000334  f8c011c0          STR      r1,[r0,#0x1c0]        ;398
;;;402      }
;;;403    }
000338  4770              BX       lr
;;;404    
                          ENDP

                  USBD_DisableEP PROC
;;;413    
;;;414    void USBD_DisableEP (uint32_t EPNum) {
00033a  4940              LDR      r1,|L1.1084|
;;;415      if (EPNum & 0x80) {
00033c  0602              LSLS     r2,r0,#24
00033e  d508              BPL      |L1.850|
;;;416        EPNum &= 0x7F;
000340  f000007f          AND      r0,r0,#0x7f
;;;417        ENDPTCTRL(EPNum) &= ~(1UL << 23);   /* EP disabled                        */
000344  eb010080          ADD      r0,r1,r0,LSL #2
000348  f8d011c0          LDR      r1,[r0,#0x1c0]
00034c  f4210100          BIC      r1,r1,#0x800000
000350  e005              B        |L1.862|
                  |L1.850|
;;;418      }
;;;419      else {
;;;420        ENDPTCTRL(EPNum)     &= ~(1UL << 7 );/* EP disabled                       */
000352  eb010080          ADD      r0,r1,r0,LSL #2
000356  f8d011c0          LDR      r1,[r0,#0x1c0]
00035a  f0210180          BIC      r1,r1,#0x80
                  |L1.862|
00035e  f8c011c0          STR      r1,[r0,#0x1c0]        ;417
;;;421      }
;;;422    }
000362  4770              BX       lr
;;;423    
                          ENDP

                  USBD_ResetEP PROC
;;;432    
;;;433    void USBD_ResetEP (uint32_t EPNum) {
000364  b410              PUSH     {r4}
;;;434      if (EPNum & 0x80) {
;;;435        EPNum &= 0x7F;
;;;436        EPQHx[EP_IN_IDX(EPNum)].dTD_token &= 0xC0;
000366  4b34              LDR      r3,|L1.1080|
;;;437        LPC_USBx->ENDPTFLUSH = (1UL << (EPNum + 16));  /* flush endpoint          */
000368  4934              LDR      r1,|L1.1084|
00036a  0604              LSLS     r4,r0,#24             ;434
00036c  f04f0201          MOV      r2,#1
000370  d51c              BPL      |L1.940|
000372  f000007f          AND      r0,r0,#0x7f           ;435
000376  eb0313c0          ADD      r3,r3,r0,LSL #7       ;436
00037a  f893404c          LDRB     r4,[r3,#0x4c]         ;436
00037e  f00404c0          AND      r4,r4,#0xc0           ;436
000382  64dc              STR      r4,[r3,#0x4c]
000384  f1000310          ADD      r3,r0,#0x10
000388  409a              LSLS     r2,r2,r3
00038a  f8c121b4          STR      r2,[r1,#0x1b4]
;;;438        while (LPC_USBx->ENDPTFLUSH & (1UL << (EPNum + 16)));
00038e  bf00              NOP      
                  |L1.912|
000390  f8d131b4          LDR      r3,[r1,#0x1b4]
000394  4213              TST      r3,r2
000396  d1fb              BNE      |L1.912|
;;;439        ENDPTCTRL(EPNum) |= (1UL << 22);    /* data toggle reset                  */
000398  eb010080          ADD      r0,r1,r0,LSL #2
00039c  f8d011c0          LDR      r1,[r0,#0x1c0]
0003a0  f4410180          ORR      r1,r1,#0x400000
0003a4  f8c011c0          STR      r1,[r0,#0x1c0]
;;;440      }
;;;441      else {
;;;442        EPQHx[EP_OUT_IDX(EPNum)].dTD_token &= 0xC0;
;;;443        LPC_USBx->ENDPTFLUSH = (1UL << EPNum);         /* flush endpoint          */
;;;444        while (LPC_USBx->ENDPTFLUSH & (1UL << EPNum));
;;;445        ENDPTCTRL(EPNum) |= (1UL << 6 );    /* data toggle reset                  */
;;;446        USBD_PrimeEp(EPNum, Ep[EP_OUT_IDX(EPNum)].maxPacket);
;;;447      }
;;;448    } 
0003a8  bc10              POP      {r4}
0003aa  4770              BX       lr
                  |L1.940|
0003ac  eb0313c0          ADD      r3,r3,r0,LSL #7       ;442
0003b0  4082              LSLS     r2,r2,r0              ;443
0003b2  7b1c              LDRB     r4,[r3,#0xc]          ;442
0003b4  f00404c0          AND      r4,r4,#0xc0           ;442
0003b8  60dc              STR      r4,[r3,#0xc]          ;443
0003ba  f8c121b4          STR      r2,[r1,#0x1b4]        ;443
0003be  bf00              NOP                            ;444
                  |L1.960|
0003c0  f8d131b4          LDR      r3,[r1,#0x1b4]        ;444
0003c4  4213              TST      r3,r2                 ;444
0003c6  d1fb              BNE      |L1.960|
0003c8  eb010180          ADD      r1,r1,r0,LSL #2       ;445
0003cc  f8d121c0          LDR      r2,[r1,#0x1c0]        ;445
0003d0  f0420240          ORR      r2,r2,#0x40           ;445
0003d4  f8c121c0          STR      r2,[r1,#0x1c0]        ;445
0003d8  4915              LDR      r1,|L1.1072|
0003da  eb011100          ADD      r1,r1,r0,LSL #4       ;446
0003de  6849              LDR      r1,[r1,#4]            ;446
0003e0  bc10              POP      {r4}                  ;446
0003e2  e7fe              B        USBD_PrimeEp
;;;449    
                          ENDP

                  USBD_SetStallEP PROC
;;;458    
;;;459    void USBD_SetStallEP (uint32_t EPNum) {
0003e4  4915              LDR      r1,|L1.1084|
;;;460      if (EPNum & 0x80) {
0003e6  0602              LSLS     r2,r0,#24
0003e8  d508              BPL      |L1.1020|
;;;461        EPNum &= 0x7F;
0003ea  f000007f          AND      r0,r0,#0x7f
;;;462        ENDPTCTRL(EPNum) |= (1UL << 16);    /* IN endpoint stall                  */
0003ee  eb010080          ADD      r0,r1,r0,LSL #2
0003f2  f8d011c0          LDR      r1,[r0,#0x1c0]
0003f6  f4413180          ORR      r1,r1,#0x10000
0003fa  e005              B        |L1.1032|
                  |L1.1020|
;;;463      }
;;;464      else {
;;;465        ENDPTCTRL(EPNum) |= (1UL << 0 );    /* OUT endpoint stall                 */
0003fc  eb010080          ADD      r0,r1,r0,LSL #2
000400  f8d011c0          LDR      r1,[r0,#0x1c0]
000404  f0410101          ORR      r1,r1,#1
                  |L1.1032|
000408  f8c011c0          STR      r1,[r0,#0x1c0]        ;462
;;;466      }
;;;467    }
00040c  4770              BX       lr
;;;468    
                          ENDP

                  USBD_ClrStallEP PROC
;;;477    
;;;478    void USBD_ClrStallEP (uint32_t EPNum) {
00040e  490b              LDR      r1,|L1.1084|
;;;479      if (EPNum & 0x80) {
000410  0602              LSLS     r2,r0,#24
000412  d534              BPL      |L1.1150|
;;;480        EPNum &= 0x7F;
000414  f000027f          AND      r2,r0,#0x7f
;;;481        ENDPTCTRL(EPNum) &= ~(1UL << 16);   /* clear stall                        */
000418  eb010082          ADD      r0,r1,r2,LSL #2
00041c  f8d011c0          LDR      r1,[r0,#0x1c0]
000420  f4213180          BIC      r1,r1,#0x10000
000424  f8c011c0          STR      r1,[r0,#0x1c0]
;;;482        ENDPTCTRL(EPNum) |=  (1UL << 22);   /* data toggle reset                  */
000428  f8d011c0          LDR      r1,[r0,#0x1c0]
00042c  e01c              B        |L1.1128|
00042e  0000              DCW      0x0000
                  |L1.1072|
                          DCD      ||.bss||+0x180
                  |L1.1076|
                          DCD      ||.data||
                  |L1.1080|
                          DCD      ||.bss||
                  |L1.1084|
                          DCD      0x40006000
                  |L1.1088|
                          DCD      0x400061c4
                  |L1.1092|
                          DCD      0x20088000
                  |L1.1096|
                          DCD      0x07000800
                  |L1.1100|
                          DCD      0x40050000
                  |L1.1104|
                          DCD      0x40051428
                  |L1.1108|
                          DCD      0x4008630c
                  |L1.1112|
                          DCD      0x40043000
                  |L1.1116|
                          DCD      USBD_P_SOF_Event
                  |L1.1120|
                          DCD      USBD_P_Error_Event
                  |L1.1124|
                          DCD      0x00010145
                  |L1.1128|
000468  f4410180          ORR      r1,r1,#0x400000
00046c  f8c011c0          STR      r1,[r0,#0x1c0]
                  |L1.1136|
;;;483        while (ENDPTCTRL(EPNum) & (1UL << 16));
000470  f8d011c0          LDR      r1,[r0,#0x1c0]
000474  03c9              LSLS     r1,r1,#15
000476  d4fb              BMI      |L1.1136|
;;;484        USBD_ResetEP(EPNum | 0x80);
000478  f0420080          ORR      r0,r2,#0x80
00047c  e7fe              B        USBD_ResetEP
                  |L1.1150|
;;;485      }
;;;486      else {
;;;487        ENDPTCTRL(EPNum) &= ~(1UL << 0 );   /* clear stall                        */
00047e  eb010080          ADD      r0,r1,r0,LSL #2
000482  f50070e0          ADD      r0,r0,#0x1c0
000486  6801              LDR      r1,[r0,#0]
000488  f0210101          BIC      r1,r1,#1
00048c  6001              STR      r1,[r0,#0]
;;;488        ENDPTCTRL(EPNum) |=  (1UL << 6 );   /* data toggle reset                  */
00048e  6801              LDR      r1,[r0,#0]
000490  f0410140          ORR      r1,r1,#0x40
000494  6001              STR      r1,[r0,#0]
;;;489      }
;;;490    }
000496  4770              BX       lr
;;;491    
                          ENDP

                  USBD_ClearEPBuf PROC
;;;500    
;;;501    void USBD_ClearEPBuf (uint32_t EPNum) {
000498  4770              BX       lr
;;;502    }
;;;503    
                          ENDP

                  USBD_ReadEP PROC
;;;567    
;;;568    uint32_t USBD_ReadEP (uint32_t EPNum, uint8_t *pData) {
00049a  b5f0              PUSH     {r4-r7,lr}
;;;569      uint32_t cnt  = 0;
;;;570      uint32_t i;
;;;571    
;;;572      /* Setup packet                                                             */
;;;573      if ((LPC_USBx->ENDPTSETUPSTAT & 1) && (!EPNum)) {
00049c  4a9e              LDR      r2,|L1.1816|
00049e  4605              MOV      r5,r0                 ;568
0004a0  2400              MOVS     r4,#0                 ;569
0004a2  f8d201ac          LDR      r0,[r2,#0x1ac]
;;;574        LPC_USBx->ENDPTSETUPSTAT = 1;
0004a6  f04f0301          MOV      r3,#1
0004aa  07c7              LSLS     r7,r0,#31             ;573
;;;575        while (LPC_USBx->ENDPTSETUPSTAT & 1);
;;;576        do {
;;;577          *((__packed uint32_t*) pData)      = EPQHx[EP_OUT_IDX(0)].setup[0];
;;;578          *((__packed uint32_t*)(pData + 4)) = EPQHx[EP_OUT_IDX(0)].setup[1];
;;;579          cnt = 8;
;;;580          LPC_USBx->USBCMD_D |= (1UL << 13);
;;;581        } while (!(LPC_USBx->USBCMD_D & (1UL << 13)));
;;;582        LPC_USBx->USBCMD_D &= (~(1UL << 13));
;;;583        LPC_USBx->ENDPTFLUSH = (1UL << EPNum) | (1UL << (EPNum + 16));
;;;584        while (LPC_USBx->ENDPTFLUSH & ((1UL << (EPNum + 16)) | (1UL << EPNum)));
;;;585        while (LPC_USBx->ENDPTSETUPSTAT & 1);
;;;586        USBD_PrimeEp(EPNum, Ep[EP_OUT_IDX(EPNum)].maxPacket);
0004ac  489b              LDR      r0,|L1.1820|
0004ae  eb001605          ADD      r6,r0,r5,LSL #4
0004b2  fa03f005          LSL      r0,r3,r5              ;583
0004b6  d000              BEQ      |L1.1210|
0004b8  b165              CBZ      r5,|L1.1236|
                  |L1.1210|
;;;587      }
;;;588    
;;;589      /* OUT Packet                                                               */
;;;590      else {
;;;591        if (Ep[EP_OUT_IDX(EPNum)].buf) {
0004ba  6833              LDR      r3,[r6,#0]
0004bc  b3f3              CBZ      r3,|L1.1340|
;;;592          cnt = Ep[EP_OUT_IDX(EPNum)].maxPacket - 
0004be  4c97              LDR      r4,|L1.1820|
0004c0  6873              LDR      r3,[r6,#4]
0004c2  3c80              SUBS     r4,r4,#0x80
0004c4  eb041485          ADD      r4,r4,r5,LSL #6
0004c8  6864              LDR      r4,[r4,#4]
0004ca  f3c4440e          UBFX     r4,r4,#16,#15
0004ce  1b1c              SUBS     r4,r3,r4
;;;593               ((dTDx[EP_OUT_IDX(EPNum)].dTD_token >> 16) & 0x7FFF);
;;;594          for (i = 0; i < cnt; i++) {
0004d0  2300              MOVS     r3,#0
0004d2  e038              B        |L1.1350|
                  |L1.1236|
0004d4  f8c231ac          STR      r3,[r2,#0x1ac]        ;574
                  |L1.1240|
0004d8  f8d241ac          LDR      r4,[r2,#0x1ac]        ;575
0004dc  07e4              LSLS     r4,r4,#31             ;575
0004de  d1fb              BNE      |L1.1240|
0004e0  4f8f              LDR      r7,|L1.1824|
                  |L1.1250|
0004e2  6abc              LDR      r4,[r7,#0x28]         ;577  ; EPQHx
0004e4  600c              STR      r4,[r1,#0]            ;577
0004e6  6afc              LDR      r4,[r7,#0x2c]         ;578  ; EPQHx
0004e8  604c              STR      r4,[r1,#4]            ;578
0004ea  f8d2c140          LDR      r12,[r2,#0x140]       ;580
0004ee  2408              MOVS     r4,#8                 ;579
0004f0  f44c5c00          ORR      r12,r12,#0x2000       ;580
0004f4  f8c2c140          STR      r12,[r2,#0x140]       ;580
0004f8  f8d2c140          LDR      r12,[r2,#0x140]       ;581
0004fc  ea5f4c8c          LSLS     r12,r12,#18           ;581
000500  d5ef              BPL      |L1.1250|
000502  f8d21140          LDR      r1,[r2,#0x140]        ;582
000506  f4215100          BIC      r1,r1,#0x2000         ;582
00050a  f8c21140          STR      r1,[r2,#0x140]        ;582
00050e  f1050110          ADD      r1,r5,#0x10           ;583
000512  408b              LSLS     r3,r3,r1              ;583
000514  ea400103          ORR      r1,r0,r3              ;583
000518  f8c211b4          STR      r1,[r2,#0x1b4]        ;583
00051c  ea530300          ORRS.W   r3,r3,r0              ;584
                  |L1.1312|
000520  f8d201b4          LDR      r0,[r2,#0x1b4]        ;584
000524  4203              TST      r3,r0                 ;584
000526  d1fb              BNE      |L1.1312|
                  |L1.1320|
000528  f8d201ac          LDR      r0,[r2,#0x1ac]        ;585
00052c  07c0              LSLS     r0,r0,#31             ;585
00052e  d1fb              BNE      |L1.1320|
                  |L1.1328|
000530  4628              MOV      r0,r5                 ;586
000532  6871              LDR      r1,[r6,#4]            ;586
000534  f7fffffe          BL       USBD_PrimeEp
;;;595            pData[i] =  Ep[EP_OUT_IDX(EPNum)].buf[i];
;;;596          }
;;;597        }
;;;598        LPC_USBx->ENDPTCOMPLETE = (1UL << EPNum);
;;;599        cmpl_pnd &= ~(1UL << EPNum);
;;;600        USBD_PrimeEp(EPNum, Ep[EP_OUT_IDX(EPNum)].maxPacket);
;;;601      }
;;;602    
;;;603      return (cnt);
000538  4620              MOV      r0,r4
;;;604    }
00053a  bdf0              POP      {r4-r7,pc}
                  |L1.1340|
00053c  e005              B        |L1.1354|
                  |L1.1342|
00053e  6837              LDR      r7,[r6,#0]            ;595
000540  5cff              LDRB     r7,[r7,r3]            ;595
000542  54cf              STRB     r7,[r1,r3]            ;595
000544  1c5b              ADDS     r3,r3,#1              ;594
                  |L1.1350|
000546  42a3              CMP      r3,r4                 ;594
000548  d3f9              BCC      |L1.1342|
                  |L1.1354|
00054a  f8c201bc          STR      r0,[r2,#0x1bc]        ;598
00054e  4975              LDR      r1,|L1.1828|
000550  688a              LDR      r2,[r1,#8]            ;599  ; cmpl_pnd
000552  4382              BICS     r2,r2,r0              ;599
000554  608a              STR      r2,[r1,#8]            ;600  ; cmpl_pnd
000556  e7eb              B        |L1.1328|
;;;605    
                          ENDP

                  USBD_WriteEP PROC
;;;616    
;;;617    uint32_t USBD_WriteEP (uint32_t EPNum, uint8_t *pData, uint32_t cnt) {
000558  b570              PUSH     {r4-r6,lr}
00055a  4614              MOV      r4,r2
;;;618      uint32_t i;
;;;619    
;;;620      EPNum &= 0x7f;
;;;621    
;;;622      for (i = 0; i < cnt; i++) {
;;;623        Ep[EP_IN_IDX(EPNum)].buf[i] = pData[i];
00055c  4a6f              LDR      r2,|L1.1820|
00055e  f000007f          AND      r0,r0,#0x7f           ;620
000562  2300              MOVS     r3,#0                 ;622
000564  eb021200          ADD      r2,r2,r0,LSL #4
000568  e003              B        |L1.1394|
                  |L1.1386|
00056a  6896              LDR      r6,[r2,#8]
00056c  5ccd              LDRB     r5,[r1,r3]
00056e  54f5              STRB     r5,[r6,r3]
000570  1c5b              ADDS     r3,r3,#1              ;622
                  |L1.1394|
000572  42a3              CMP      r3,r4                 ;622
000574  d3f9              BCC      |L1.1386|
;;;624      }
;;;625    
;;;626      USBD_PrimeEp(EPNum | 0x80, cnt);
000576  f0400080          ORR      r0,r0,#0x80
00057a  4621              MOV      r1,r4
00057c  f7fffffe          BL       USBD_PrimeEp
;;;627    
;;;628      return (cnt);
000580  4620              MOV      r0,r4
;;;629    }
000582  bd70              POP      {r4-r6,pc}
;;;630    
                          ENDP

                  USBD_GetFrame PROC
;;;637    
;;;638    uint32_t USBD_GetFrame (void) {
000584  4868              LDR      r0,|L1.1832|
;;;639      return ((LPC_USBx->FRINDEX_D >> 3) & 0x0FFF);
000586  6800              LDR      r0,[r0,#0]
000588  f3c000cb          UBFX     r0,r0,#3,#12
;;;640    }
00058c  4770              BX       lr
;;;641    
                          ENDP

                  USB0_IRQHandler PROC
;;;661    
;;;662    void USB0_IRQHandler (void) {
00058e  e92d5ff0          PUSH     {r4-r12,lr}
000592  4f65              LDR      r7,|L1.1832|
000594  3f08              SUBS     r7,r7,#8
;;;663      uint32_t sts, cmpl, num;
;;;664    
;;;665      sts  = LPC_USBx->USBSTS_D & LPC_USBx->USBINTR_D;
000596  683e              LDR      r6,[r7,#0]
000598  6878              LDR      r0,[r7,#4]
;;;666      cmpl = LPC_USBx->ENDPTCOMPLETE;
00059a  6fbd              LDR      r5,[r7,#0x78]
00059c  4006              ANDS     r6,r6,r0              ;665
;;;667    
;;;668      LPC_USBx->USBSTS_D = sts;                     /* clear interupt flags       */
00059e  603e              STR      r6,[r7,#0]
0005a0  f5a777a2          SUB      r7,r7,#0x144
;;;669    
;;;670      /* reset interrupt                                                          */
;;;671      if (sts & (1UL << 6)) {
0005a4  0670              LSLS     r0,r6,#25
0005a6  d508              BPL      |L1.1466|
;;;672        USBD_Reset();
0005a8  f7fffffe          BL       USBD_Reset
;;;673        usbd_reset_core();
0005ac  f7fffffe          BL       usbd_reset_core
;;;674    #ifdef __RTX
;;;675        if (USBD_RTX_DevTask) {
;;;676          isr_evt_set(USBD_EVT_RESET, USBD_RTX_DevTask);
;;;677        }
;;;678    #else
;;;679        if (USBD_P_Reset_Event) {
0005b0  485e              LDR      r0,|L1.1836|
0005b2  6801              LDR      r1,[r0,#0]  ; USBD_P_Reset_Event
0005b4  b109              CBZ      r1,|L1.1466|
;;;680          USBD_P_Reset_Event();
0005b6  4608              MOV      r0,r1
0005b8  4780              BLX      r0
                  |L1.1466|
;;;681        }
;;;682    #endif
;;;683      }
;;;684    
;;;685      /* suspend interrupt                                                        */
;;;686      if (sts & (1UL << 8)) {
0005ba  05f0              LSLS     r0,r6,#23
0005bc  d504              BPL      |L1.1480|
;;;687        USBD_Suspend();
;;;688    #ifdef __RTX
;;;689        if (USBD_RTX_DevTask) {
;;;690          isr_evt_set(USBD_EVT_SUSPEND, USBD_RTX_DevTask);
;;;691        }
;;;692    #else
;;;693        if (USBD_P_Suspend_Event) {
0005be  485c              LDR      r0,|L1.1840|
0005c0  6801              LDR      r1,[r0,#0]  ; USBD_P_Suspend_Event
0005c2  b109              CBZ      r1,|L1.1480|
;;;694          USBD_P_Suspend_Event();
0005c4  4608              MOV      r0,r1
0005c6  4780              BLX      r0
                  |L1.1480|
;;;695        }
;;;696    #endif
;;;697      }
;;;698    
;;;699      /* SOF interrupt                                                            */
;;;700      if (sts & (1UL << 7)) {
;;;701        if (IsoEp) {
0005c8  f8df9158          LDR      r9,|L1.1828|
;;;702          for (num = 0; num < USBD_EP_NUM + 1; num++) {
;;;703            if (IsoEp & (1UL << num)) {
;;;704              USBD_PrimeEp (num, Ep[EP_OUT_IDX(num)].maxPacket);
;;;705            }
;;;706          }
;;;707        }
;;;708        else {
;;;709    #ifdef __RTX
;;;710          if (USBD_RTX_DevTask) {
;;;711            isr_evt_set(USBD_EVT_SOF, USBD_RTX_DevTask);
;;;712          }
;;;713    #else
;;;714          if (USBD_P_SOF_Event) {
0005cc  f8dfb164          LDR      r11,|L1.1844|
0005d0  0630              LSLS     r0,r6,#24             ;700
0005d2  f04f0401          MOV      r4,#1                 ;703
0005d6  d51e              BPL      |L1.1558|
0005d8  f8d91004          LDR      r1,[r9,#4]            ;701  ; IsoEp
0005dc  b1b1              CBZ      r1,|L1.1548|
0005de  f8dfa13c          LDR      r10,|L1.1820|
0005e2  f04f0c00          MOV      r12,#0                ;702
0005e6  46c8              MOV      r8,r9                 ;701
                  |L1.1512|
0005e8  fa04f00c          LSL      r0,r4,r12             ;703
0005ec  f8d81004          LDR      r1,[r8,#4]            ;703  ; IsoEp
0005f0  4208              TST      r0,r1                 ;703
0005f2  d005              BEQ      |L1.1536|
0005f4  eb0a100c          ADD      r0,r10,r12,LSL #4     ;704
0005f8  6841              LDR      r1,[r0,#4]            ;704
0005fa  4660              MOV      r0,r12                ;704
0005fc  f7fffffe          BL       USBD_PrimeEp
                  |L1.1536|
000600  f10c0c01          ADD      r12,r12,#1            ;702
000604  f1bc0f02          CMP      r12,#2                ;702
000608  d3ee              BCC      |L1.1512|
00060a  e004              B        |L1.1558|
                  |L1.1548|
00060c  f8db1000          LDR      r1,[r11,#0]  ; USBD_P_SOF_Event
000610  b109              CBZ      r1,|L1.1558|
;;;715            USBD_P_SOF_Event();
000612  4608              MOV      r0,r1
000614  4780              BLX      r0
                  |L1.1558|
;;;716          }
;;;717    #endif
;;;718        }
;;;719      }
;;;720    
;;;721      /* port change detect interrupt                                             */
;;;722      if (sts & (1UL << 2)) {
000616  0770              LSLS     r0,r6,#29
000618  d50c              BPL      |L1.1588|
;;;723        if (((LPC_USBx->PORTSC1_D >> 26) & 0x03) == 2) {
00061a  f8d70184          LDR      r0,[r7,#0x184]
00061e  f3c06081          UBFX     r0,r0,#26,#2
000622  2802              CMP      r0,#2
000624  d101              BNE      |L1.1578|
;;;724          USBD_HighSpeed = __TRUE;
000626  4844              LDR      r0,|L1.1848|
000628  7004              STRB     r4,[r0,#0]
                  |L1.1578|
;;;725        }
;;;726        USBD_Resume();
;;;727    #ifdef __RTX
;;;728        if (USBD_RTX_DevTask) {
;;;729          isr_evt_set(USBD_EVT_RESUME,  USBD_RTX_DevTask);
;;;730        }
;;;731    #else
;;;732        if (USBD_P_Resume_Event) {
00062a  4844              LDR      r0,|L1.1852|
00062c  6801              LDR      r1,[r0,#0]  ; USBD_P_Resume_Event
00062e  b109              CBZ      r1,|L1.1588|
;;;733          USBD_P_Resume_Event();
000630  4608              MOV      r0,r1
000632  4780              BLX      r0
                  |L1.1588|
;;;734        }
;;;735    #endif
;;;736      }
;;;737    
;;;738      /* USB interrupt - completed transfer                                       */
;;;739      if (sts & 1) {
000634  07f0              LSLS     r0,r6,#31
000636  d044              BEQ      |L1.1730|
;;;740        /* Setup Packet                                                           */
;;;741        if (LPC_USBx->ENDPTSETUPSTAT) {
000638  f8d701ac          LDR      r0,[r7,#0x1ac]
00063c  46ba              MOV      r10,r7
;;;742    #ifdef __RTX
;;;743          if (USBD_RTX_EPTask[0]) {
;;;744            isr_evt_set(USBD_EVT_SETUP, USBD_RTX_EPTask[0]);
;;;745          }
;;;746    #else
;;;747          if (USBD_P_EP[0]) {
00063e  f8df8100          LDR      r8,|L1.1856|
000642  b120              CBZ      r0,|L1.1614|
000644  f8d81000          LDR      r1,[r8,#0]  ; USBD_P_EP
000648  b109              CBZ      r1,|L1.1614|
;;;748            USBD_P_EP[0](USBD_EVT_SETUP);
00064a  2002              MOVS     r0,#2
00064c  4788              BLX      r1
                  |L1.1614|
;;;749          }
;;;750    #endif
;;;751        }
;;;752        /* IN Packet                                                              */
;;;753        if (cmpl & (0x3F << 16)) {
00064e  f4151f7c          TST      r5,#0x3f0000
000652  d015              BEQ      |L1.1664|
;;;754          for (num = 0; num < USBD_EP_NUM + 1; num++) {
000654  f05f0700          MOVS.W   r7,#0
                  |L1.1624|
;;;755            if (((cmpl >> 16) & 0x3F) & (1UL << num)) {
000658  fa04f007          LSL      r0,r4,r7
00065c  ea004015          AND      r0,r0,r5,LSR #16
000660  0680              LSLS     r0,r0,#26
000662  d00a              BEQ      |L1.1658|
;;;756              LPC_USBx->ENDPTCOMPLETE = (1UL << (num + 16));    /* Clear completed*/
000664  f1070110          ADD      r1,r7,#0x10
000668  fa04f001          LSL      r0,r4,r1
00066c  f8ca01bc          STR      r0,[r10,#0x1bc]
;;;757    #ifdef __RTX
;;;758              if (USBD_RTX_EPTask[num]) {
;;;759                isr_evt_set(USBD_EVT_IN,  USBD_RTX_EPTask[num]);
;;;760              }
;;;761    #else
;;;762              if (USBD_P_EP[num]) {
000670  f8581027          LDR      r1,[r8,r7,LSL #2]
000674  b109              CBZ      r1,|L1.1658|
;;;763                USBD_P_EP[num](USBD_EVT_IN);
000676  2008              MOVS     r0,#8
000678  4788              BLX      r1
                  |L1.1658|
00067a  1c7f              ADDS     r7,r7,#1              ;754
00067c  2f02              CMP      r7,#2                 ;754
00067e  d3eb              BCC      |L1.1624|
                  |L1.1664|
;;;764              }
;;;765    #endif
;;;766            }
;;;767          }
;;;768        }
;;;769    
;;;770        /* OUT Packet                                                             */
;;;771        if (cmpl & 0x3F) {
000680  06a8              LSLS     r0,r5,#26
000682  d01e              BEQ      |L1.1730|
;;;772          for (num = 0; num < USBD_EP_NUM + 1; num++) {
000684  2700              MOVS     r7,#0
                  |L1.1670|
;;;773            if ((cmpl ^ cmpl_pnd) & cmpl & (1UL << num)) {
000686  f8d93008          LDR      r3,[r9,#8]  ; cmpl_pnd
00068a  fa04f007          LSL      r0,r4,r7
00068e  ea250203          BIC      r2,r5,r3
000692  4649              MOV      r1,r9
000694  4202              TST      r2,r0
000696  d011              BEQ      |L1.1724|
;;;774              cmpl_pnd |= 1UL << num;
000698  ea400203          ORR      r2,r0,r3
;;;775    #ifdef __RTX
;;;776              if (USBD_RTX_EPTask[num]) {
;;;777                isr_evt_set(USBD_EVT_OUT, USBD_RTX_EPTask[num]);
;;;778              }
;;;779              else if (IsoEp & (1UL << num)) {
;;;780                if (USBD_RTX_DevTask) {
;;;781                  isr_evt_set(USBD_EVT_SOF, USBD_RTX_DevTask);
;;;782                }
;;;783              }
;;;784    #else
;;;785              if (USBD_P_EP[num]) {
00069c  608a              STR      r2,[r1,#8]  ; cmpl_pnd
00069e  f8582027          LDR      r2,[r8,r7,LSL #2]
0006a2  b112              CBZ      r2,|L1.1706|
;;;786                USBD_P_EP[num](USBD_EVT_OUT);
0006a4  2004              MOVS     r0,#4
0006a6  4790              BLX      r2
0006a8  e008              B        |L1.1724|
                  |L1.1706|
;;;787              }
;;;788              else if (IsoEp & (1UL << num)) {
0006aa  f8d91004          LDR      r1,[r9,#4]  ; IsoEp
0006ae  4208              TST      r0,r1
0006b0  d004              BEQ      |L1.1724|
;;;789                if (USBD_P_SOF_Event) {
0006b2  f8db1000          LDR      r1,[r11,#0]  ; USBD_P_SOF_Event
0006b6  b109              CBZ      r1,|L1.1724|
;;;790                  USBD_P_SOF_Event();
0006b8  4608              MOV      r0,r1
0006ba  4780              BLX      r0
                  |L1.1724|
0006bc  1c7f              ADDS     r7,r7,#1              ;772
0006be  2f02              CMP      r7,#2                 ;772
0006c0  d3e1              BCC      |L1.1670|
                  |L1.1730|
;;;791                }
;;;792              }
;;;793    #endif
;;;794            }
;;;795          }
;;;796        }
;;;797      }
;;;798    
;;;799      /* error interrupt                                                          */
;;;800      if (sts & (1UL << 1)) {
0006c2  07b0              LSLS     r0,r6,#30
0006c4  d526              BPL      |L1.1812|
;;;801        for (num = 0; num < USBD_EP_NUM + 1; num++) {
;;;802          if (cmpl & (1UL << num)) {
;;;803    #ifdef __RTX
;;;804            if (USBD_RTX_DevTask) {
;;;805              LastError = dTDx[EP_OUT_IDX(num)].dTD_token & 0xE8;
;;;806              isr_evt_set(USBD_EVT_ERROR, USBD_RTX_DevTask);
;;;807            }
;;;808    #else
;;;809            if (USBD_P_Error_Event) {
;;;810              USBD_P_Error_Event(dTDx[EP_OUT_IDX(num)].dTD_token & 0xE8);
0006c6  f8df8054          LDR      r8,|L1.1820|
0006ca  4f1e              LDR      r7,|L1.1860|
0006cc  2600              MOVS     r6,#0                 ;801
0006ce  f1a80880          SUB      r8,r8,#0x80
0006d2  bf00              NOP                            ;802
                  |L1.1748|
0006d4  fa04f006          LSL      r0,r4,r6              ;802
0006d8  4228              TST      r0,r5                 ;802
0006da  d008              BEQ      |L1.1774|
0006dc  6838              LDR      r0,[r7,#0]            ;809  ; USBD_P_Error_Event
0006de  b130              CBZ      r0,|L1.1774|
0006e0  eb081086          ADD      r0,r8,r6,LSL #6
0006e4  6839              LDR      r1,[r7,#0]  ; USBD_P_Error_Event
0006e6  7900              LDRB     r0,[r0,#4]
0006e8  f00000e8          AND      r0,r0,#0xe8
0006ec  4788              BLX      r1
                  |L1.1774|
;;;811            }
;;;812    #endif
;;;813          }
;;;814          if (cmpl & (1UL << (num + 16))) {
0006ee  f1060110          ADD      r1,r6,#0x10
0006f2  fa04f001          LSL      r0,r4,r1
0006f6  4228              TST      r0,r5
0006f8  d009              BEQ      |L1.1806|
;;;815    #ifdef __RTX
;;;816            if (USBD_RTX_DevTask) {
;;;817              LastError = dTDx[EP_IN_IDX(num)].dTD_token & 0xE8;
;;;818              isr_evt_set(USBD_EVT_ERROR, USBD_RTX_DevTask);
;;;819            }
;;;820    #else
;;;821            if (USBD_P_Error_Event) {
0006fa  6838              LDR      r0,[r7,#0]  ; USBD_P_Error_Event
0006fc  b138              CBZ      r0,|L1.1806|
;;;822              USBD_P_Error_Event(dTDx[EP_IN_IDX(num)].dTD_token & 0xE8);
0006fe  eb081086          ADD      r0,r8,r6,LSL #6
000702  6839              LDR      r1,[r7,#0]  ; USBD_P_Error_Event
000704  f8900024          LDRB     r0,[r0,#0x24]
000708  f00000e8          AND      r0,r0,#0xe8
00070c  4788              BLX      r1
                  |L1.1806|
00070e  1c76              ADDS     r6,r6,#1              ;801
000710  2e02              CMP      r6,#2                 ;801
000712  d3df              BCC      |L1.1748|
                  |L1.1812|
;;;823            }
;;;824    #endif
;;;825          }
;;;826        }
;;;827      } 
;;;828    }
000714  e8bd9ff0          POP      {r4-r12,pc}
                          ENDP

                  |L1.1816|
                          DCD      0x40006000
                  |L1.1820|
                          DCD      ||.bss||+0x180
                  |L1.1824|
                          DCD      ||.bss||
                  |L1.1828|
                          DCD      ||.data||
                  |L1.1832|
                          DCD      0x4000614c
                  |L1.1836|
                          DCD      USBD_P_Reset_Event
                  |L1.1840|
                          DCD      USBD_P_Suspend_Event
                  |L1.1844|
                          DCD      USBD_P_SOF_Event
                  |L1.1848|
                          DCD      USBD_HighSpeed
                  |L1.1852|
                          DCD      USBD_P_Resume_Event
                  |L1.1856|
                          DCD      USBD_P_EP
                  |L1.1860|
                          DCD      USBD_P_Error_Event

                          AREA ||.bss||, DATA, NOINIT, ALIGN=12

                  EPQHx
                          %        256
                  dTDx
                          %        128
                  ||Ep||
                          %        3712
                  EPBufPool
                          %        144

                          AREA ||.data||, DATA, ALIGN=2

                  BufUsed
                          DCD      0x00000000
                  IsoEp
                          DCD      0x00000000
                  cmpl_pnd
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "usbd_LPC18xx_USB0.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___19_usbd_LPC18xx_USB0_c_a976cdfd____REV16|
#line 130 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_usbd_LPC18xx_USB0_c_a976cdfd____REV16| PROC
#line 131

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___19_usbd_LPC18xx_USB0_c_a976cdfd____REVSH|
#line 145
|__asm___19_usbd_LPC18xx_USB0_c_a976cdfd____REVSH| PROC
#line 146

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
